#pragma once
/**********************************************************
*        AUTO GENERATED FILE BY sox_code_generator        *
*                  DO NOT EDIT THIS FILE                  *
**********************************************************/

#include "sl/data/sox/sox_table_interface.h"

namespace sunlight::sox
{
    struct MinigameInterface
    {
        explicit MinigameInterface(StreamReader<std::vector<char>::const_iterator>& reader);

        int32_t index = {};
        std::string gameName = {};
        int32_t minNumTeams = {};
        int32_t maxNumTeams = {};
        int32_t minTeamSize = {};
        int32_t maxTeamSize = {};
        int32_t maxNumObs = {};
        int32_t teamMinPlayer = {};
        int32_t equalPlayer = {};
        int32_t maxBet = {};
        int32_t param1Name = {};
        int32_t param1Min = {};
        int32_t param1Max = {};
        int32_t param2Name = {};
        int32_t param2Min = {};
        int32_t param2Max = {};
        int32_t param3Name = {};
        int32_t param3Min = {};
        int32_t param3Max = {};
    };

    class MinigameInterfaceTable final : public ISoxTable, public std::enable_shared_from_this<MinigameInterfaceTable>
    {
    public:
        void LoadFromFile(const std::filesystem::path& path) override;

        auto Find(int32_t index) const -> const MinigameInterface*;
        auto Get() const -> const std::vector<MinigameInterface>&;

    private:
        std::unordered_map<int32_t, MinigameInterface*> _umap;
        std::vector<MinigameInterface> _vector;

    };
}
