#pragma once
/**********************************************************
*        AUTO GENERATED FILE BY sox_code_generator        *
*                  DO NOT EDIT THIS FILE                  *
**********************************************************/

#include "sl/data/sox/sox_table_interface.h"

namespace sunlight::sox
{
    struct MinigameTypingBalance
    {
        explicit MinigameTypingBalance(StreamReader<std::vector<char>::const_iterator>& reader);

        int32_t index = {};
        int32_t playerSpeed = {};
        int32_t monsterSpeed = {};
        int32_t monsterAccel = {};
        int32_t monsterAttack = {};
        int32_t itemTerm = {};
        int32_t itemDuration = {};
        int32_t item1Duration = {};
        int32_t item1Effect = {};
        int32_t item2Duration = {};
        int32_t item2Effect = {};
        int32_t item3Duration = {};
        int32_t item3Effect = {};
        int32_t item4Duration = {};
        int32_t item4Effect = {};
        int32_t item5Duration = {};
        int32_t item5Effect = {};
    };

    class MinigameTypingBalanceTable final : public ISoxTable, public std::enable_shared_from_this<MinigameTypingBalanceTable>
    {
    public:
        void LoadFromFile(const std::filesystem::path& path) override;

        auto Find(int32_t index) const -> const MinigameTypingBalance*;
        auto Get() const -> const std::vector<MinigameTypingBalance>&;

    private:
        std::unordered_map<int32_t, MinigameTypingBalance*> _umap;
        std::vector<MinigameTypingBalance> _vector;

    };
}
