// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dto.proto
// Protobuf C++ Version: 5.29.0

#include "dto.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace sunlight {
namespace api {

inline constexpr ZoneInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{0},
        port_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ZoneInfo::ZoneInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ZoneInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZoneInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZoneInfoDefaultTypeInternal() {}
  union {
    ZoneInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZoneInfoDefaultTypeInternal _ZoneInfo_default_instance_;

inline constexpr LogItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        date_time_{::int64_t{0}},
        log_level_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogItem::LogItem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LogItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogItemDefaultTypeInternal() {}
  union {
    LogItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogItemDefaultTypeInternal _LogItem_default_instance_;

inline constexpr WorldInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : open_zone_list_{},
        id_{0},
        user_count_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorldInfo::WorldInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WorldInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldInfoDefaultTypeInternal() {}
  union {
    WorldInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldInfoDefaultTypeInternal _WorldInfo_default_instance_;
}  // namespace api
}  // namespace sunlight
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dto_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dto_2eproto = nullptr;
const ::uint32_t
    TableStruct_dto_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::sunlight::api::ZoneInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::sunlight::api::ZoneInfo, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::sunlight::api::ZoneInfo, _impl_.port_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::sunlight::api::WorldInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::sunlight::api::WorldInfo, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::sunlight::api::WorldInfo, _impl_.user_count_),
        PROTOBUF_FIELD_OFFSET(::sunlight::api::WorldInfo, _impl_.open_zone_list_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::sunlight::api::LogItem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::sunlight::api::LogItem, _impl_.date_time_),
        PROTOBUF_FIELD_OFFSET(::sunlight::api::LogItem, _impl_.log_level_),
        PROTOBUF_FIELD_OFFSET(::sunlight::api::LogItem, _impl_.message_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::sunlight::api::ZoneInfo)},
        {10, -1, -1, sizeof(::sunlight::api::WorldInfo)},
        {21, -1, -1, sizeof(::sunlight::api::LogItem)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::sunlight::api::_ZoneInfo_default_instance_._instance,
    &::sunlight::api::_WorldInfo_default_instance_._instance,
    &::sunlight::api::_LogItem_default_instance_._instance,
};
const char descriptor_table_protodef_dto_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\tdto.proto\022\014sunlight.api\"$\n\010ZoneInfo\022\n\n"
    "\002id\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\"[\n\tWorldInfo\022\n\n\002"
    "id\030\001 \001(\005\022\022\n\nuser_count\030\002 \001(\005\022.\n\016open_zon"
    "e_list\030\003 \003(\0132\026.sunlight.api.ZoneInfo\"@\n\007"
    "LogItem\022\021\n\tdate_time\030\001 \001(\003\022\021\n\tlog_level\030"
    "\002 \001(\005\022\017\n\007message\030\003 \001(\014b\006proto3"
};
static ::absl::once_flag descriptor_table_dto_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_dto_2eproto = {
    false,
    false,
    230,
    descriptor_table_protodef_dto_2eproto,
    "dto.proto",
    &descriptor_table_dto_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_dto_2eproto::offsets,
    file_level_enum_descriptors_dto_2eproto,
    file_level_service_descriptors_dto_2eproto,
};
namespace sunlight {
namespace api {
// ===================================================================

class ZoneInfo::_Internal {
 public:
};

ZoneInfo::ZoneInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sunlight.api.ZoneInfo)
}
ZoneInfo::ZoneInfo(
    ::google::protobuf::Arena* arena, const ZoneInfo& from)
    : ZoneInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ZoneInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ZoneInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, port_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::port_));
}
ZoneInfo::~ZoneInfo() {
  // @@protoc_insertion_point(destructor:sunlight.api.ZoneInfo)
  SharedDtor(*this);
}
inline void ZoneInfo::SharedDtor(MessageLite& self) {
  ZoneInfo& this_ = static_cast<ZoneInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ZoneInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ZoneInfo(arena);
}
constexpr auto ZoneInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ZoneInfo),
                                            alignof(ZoneInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ZoneInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ZoneInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ZoneInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ZoneInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ZoneInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ZoneInfo>(), &ZoneInfo::ByteSizeLong,
            &ZoneInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ZoneInfo, _impl_._cached_size_),
        false,
    },
    &ZoneInfo::kDescriptorMethods,
    &descriptor_table_dto_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ZoneInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ZoneInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sunlight::api::ZoneInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 port = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ZoneInfo, _impl_.port_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneInfo, _impl_.port_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ZoneInfo, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneInfo, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(ZoneInfo, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 port = 2;
    {PROTOBUF_FIELD_OFFSET(ZoneInfo, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ZoneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sunlight.api.ZoneInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ZoneInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ZoneInfo& this_ = static_cast<const ZoneInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ZoneInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ZoneInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:sunlight.api.ZoneInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 id = 1;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // int32 port = 2;
          if (this_._internal_port() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_port(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:sunlight.api.ZoneInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ZoneInfo::ByteSizeLong(const MessageLite& base) {
          const ZoneInfo& this_ = static_cast<const ZoneInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ZoneInfo::ByteSizeLong() const {
          const ZoneInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:sunlight.api.ZoneInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
            // int32 port = 2;
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_port());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ZoneInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ZoneInfo*>(&to_msg);
  auto& from = static_cast<const ZoneInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sunlight.api.ZoneInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneInfo::CopyFrom(const ZoneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sunlight.api.ZoneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ZoneInfo::InternalSwap(ZoneInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoneInfo, _impl_.port_)
      + sizeof(ZoneInfo::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(ZoneInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata ZoneInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WorldInfo::_Internal {
 public:
};

WorldInfo::WorldInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sunlight.api.WorldInfo)
}
inline PROTOBUF_NDEBUG_INLINE WorldInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::sunlight::api::WorldInfo& from_msg)
      : open_zone_list_{visibility, arena, from.open_zone_list_},
        _cached_size_{0} {}

WorldInfo::WorldInfo(
    ::google::protobuf::Arena* arena,
    const WorldInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WorldInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, user_count_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::user_count_));

  // @@protoc_insertion_point(copy_constructor:sunlight.api.WorldInfo)
}
inline PROTOBUF_NDEBUG_INLINE WorldInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : open_zone_list_{visibility, arena},
        _cached_size_{0} {}

inline void WorldInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, user_count_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::user_count_));
}
WorldInfo::~WorldInfo() {
  // @@protoc_insertion_point(destructor:sunlight.api.WorldInfo)
  SharedDtor(*this);
}
inline void WorldInfo::SharedDtor(MessageLite& self) {
  WorldInfo& this_ = static_cast<WorldInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* WorldInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WorldInfo(arena);
}
constexpr auto WorldInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.open_zone_list_) +
          decltype(WorldInfo::_impl_.open_zone_list_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(WorldInfo), alignof(WorldInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WorldInfo::PlacementNew_,
                                 sizeof(WorldInfo),
                                 alignof(WorldInfo));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WorldInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WorldInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WorldInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WorldInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WorldInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WorldInfo>(), &WorldInfo::ByteSizeLong,
            &WorldInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_._cached_size_),
        false,
    },
    &WorldInfo::kDescriptorMethods,
    &descriptor_table_dto_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WorldInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> WorldInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sunlight::api::WorldInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldInfo, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.id_)}},
    // int32 user_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldInfo, _impl_.user_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.user_count_)}},
    // repeated .sunlight.api.ZoneInfo open_zone_list = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.open_zone_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 user_count = 2;
    {PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.user_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .sunlight.api.ZoneInfo open_zone_list = 3;
    {PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.open_zone_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::sunlight::api::ZoneInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WorldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sunlight.api.WorldInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.open_zone_list_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.user_count_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WorldInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WorldInfo& this_ = static_cast<const WorldInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WorldInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WorldInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:sunlight.api.WorldInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 id = 1;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // int32 user_count = 2;
          if (this_._internal_user_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_user_count(), target);
          }

          // repeated .sunlight.api.ZoneInfo open_zone_list = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_open_zone_list_size());
               i < n; i++) {
            const auto& repfield = this_._internal_open_zone_list().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:sunlight.api.WorldInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WorldInfo::ByteSizeLong(const MessageLite& base) {
          const WorldInfo& this_ = static_cast<const WorldInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WorldInfo::ByteSizeLong() const {
          const WorldInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:sunlight.api.WorldInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .sunlight.api.ZoneInfo open_zone_list = 3;
            {
              total_size += 1UL * this_._internal_open_zone_list_size();
              for (const auto& msg : this_._internal_open_zone_list()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // int32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
            // int32 user_count = 2;
            if (this_._internal_user_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_user_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WorldInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WorldInfo*>(&to_msg);
  auto& from = static_cast<const WorldInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sunlight.api.WorldInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_open_zone_list()->MergeFrom(
      from._internal_open_zone_list());
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_user_count() != 0) {
    _this->_impl_.user_count_ = from._impl_.user_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorldInfo::CopyFrom(const WorldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sunlight.api.WorldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WorldInfo::InternalSwap(WorldInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.open_zone_list_.InternalSwap(&other->_impl_.open_zone_list_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.user_count_)
      + sizeof(WorldInfo::_impl_.user_count_)
      - PROTOBUF_FIELD_OFFSET(WorldInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata WorldInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LogItem::_Internal {
 public:
};

LogItem::LogItem(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sunlight.api.LogItem)
}
inline PROTOBUF_NDEBUG_INLINE LogItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::sunlight::api::LogItem& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

LogItem::LogItem(
    ::google::protobuf::Arena* arena,
    const LogItem& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LogItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, date_time_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, date_time_),
           offsetof(Impl_, log_level_) -
               offsetof(Impl_, date_time_) +
               sizeof(Impl_::log_level_));

  // @@protoc_insertion_point(copy_constructor:sunlight.api.LogItem)
}
inline PROTOBUF_NDEBUG_INLINE LogItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void LogItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, date_time_),
           0,
           offsetof(Impl_, log_level_) -
               offsetof(Impl_, date_time_) +
               sizeof(Impl_::log_level_));
}
LogItem::~LogItem() {
  // @@protoc_insertion_point(destructor:sunlight.api.LogItem)
  SharedDtor(*this);
}
inline void LogItem::SharedDtor(MessageLite& self) {
  LogItem& this_ = static_cast<LogItem&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* LogItem::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LogItem(arena);
}
constexpr auto LogItem::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(LogItem),
                                            alignof(LogItem));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LogItem::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LogItem_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LogItem::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LogItem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LogItem::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LogItem>(), &LogItem::ByteSizeLong,
            &LogItem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LogItem, _impl_._cached_size_),
        false,
    },
    &LogItem::kDescriptorMethods,
    &descriptor_table_dto_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LogItem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> LogItem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::sunlight::api::LogItem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 date_time = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(LogItem, _impl_.date_time_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LogItem, _impl_.date_time_)}},
    // int32 log_level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LogItem, _impl_.log_level_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LogItem, _impl_.log_level_)}},
    // bytes message = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LogItem, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 date_time = 1;
    {PROTOBUF_FIELD_OFFSET(LogItem, _impl_.date_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 log_level = 2;
    {PROTOBUF_FIELD_OFFSET(LogItem, _impl_.log_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes message = 3;
    {PROTOBUF_FIELD_OFFSET(LogItem, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void LogItem::Clear() {
// @@protoc_insertion_point(message_clear_start:sunlight.api.LogItem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.date_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.log_level_) -
      reinterpret_cast<char*>(&_impl_.date_time_)) + sizeof(_impl_.log_level_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LogItem::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LogItem& this_ = static_cast<const LogItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LogItem::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LogItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:sunlight.api.LogItem)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 date_time = 1;
          if (this_._internal_date_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_date_time(), target);
          }

          // int32 log_level = 2;
          if (this_._internal_log_level() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_log_level(), target);
          }

          // bytes message = 3;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            target = stream->WriteBytesMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:sunlight.api.LogItem)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LogItem::ByteSizeLong(const MessageLite& base) {
          const LogItem& this_ = static_cast<const LogItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LogItem::ByteSizeLong() const {
          const LogItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:sunlight.api.LogItem)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes message = 3;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_message());
            }
            // int64 date_time = 1;
            if (this_._internal_date_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_date_time());
            }
            // int32 log_level = 2;
            if (this_._internal_log_level() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_log_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LogItem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LogItem*>(&to_msg);
  auto& from = static_cast<const LogItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sunlight.api.LogItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_date_time() != 0) {
    _this->_impl_.date_time_ = from._impl_.date_time_;
  }
  if (from._internal_log_level() != 0) {
    _this->_impl_.log_level_ = from._impl_.log_level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogItem::CopyFrom(const LogItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sunlight.api.LogItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LogItem::InternalSwap(LogItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogItem, _impl_.log_level_)
      + sizeof(LogItem::_impl_.log_level_)
      - PROTOBUF_FIELD_OFFSET(LogItem, _impl_.date_time_)>(
          reinterpret_cast<char*>(&_impl_.date_time_),
          reinterpret_cast<char*>(&other->_impl_.date_time_));
}

::google::protobuf::Metadata LogItem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace sunlight
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_dto_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
