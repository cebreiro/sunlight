// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: request.proto
// Protobuf C++ Version: 5.29.0

#ifndef request_2eproto_2epb_2eh
#define request_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_request_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_request_2eproto;
namespace sunlight {
namespace api {
class AccountCreationReuqest;
struct AccountCreationReuqestDefaultTypeInternal;
extern AccountCreationReuqestDefaultTypeInternal _AccountCreationReuqest_default_instance_;
class AccountPasswordChangeRequest;
struct AccountPasswordChangeRequestDefaultTypeInternal;
extern AccountPasswordChangeRequestDefaultTypeInternal _AccountPasswordChangeRequest_default_instance_;
class AuthenticationRequest;
struct AuthenticationRequestDefaultTypeInternal;
extern AuthenticationRequestDefaultTypeInternal _AuthenticationRequest_default_instance_;
class LogGetRequest;
struct LogGetRequestDefaultTypeInternal;
extern LogGetRequestDefaultTypeInternal _LogGetRequest_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class SystemResourceInfoRequest;
struct SystemResourceInfoRequestDefaultTypeInternal;
extern SystemResourceInfoRequestDefaultTypeInternal _SystemResourceInfoRequest_default_instance_;
class UserCountRequest;
struct UserCountRequestDefaultTypeInternal;
extern UserCountRequestDefaultTypeInternal _UserCountRequest_default_instance_;
class WorldInfoRequest;
struct WorldInfoRequestDefaultTypeInternal;
extern WorldInfoRequestDefaultTypeInternal _WorldInfoRequest_default_instance_;
class ZoneCloseRequest;
struct ZoneCloseRequestDefaultTypeInternal;
extern ZoneCloseRequestDefaultTypeInternal _ZoneCloseRequest_default_instance_;
class ZoneOpenRequest;
struct ZoneOpenRequestDefaultTypeInternal;
extern ZoneOpenRequestDefaultTypeInternal _ZoneOpenRequest_default_instance_;
}  // namespace api
}  // namespace sunlight
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sunlight {
namespace api {

// ===================================================================


// -------------------------------------------------------------------

class ZoneOpenRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.ZoneOpenRequest) */ {
 public:
  inline ZoneOpenRequest() : ZoneOpenRequest(nullptr) {}
  ~ZoneOpenRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ZoneOpenRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ZoneOpenRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ZoneOpenRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ZoneOpenRequest(const ZoneOpenRequest& from) : ZoneOpenRequest(nullptr, from) {}
  inline ZoneOpenRequest(ZoneOpenRequest&& from) noexcept
      : ZoneOpenRequest(nullptr, std::move(from)) {}
  inline ZoneOpenRequest& operator=(const ZoneOpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneOpenRequest& operator=(ZoneOpenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneOpenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneOpenRequest* internal_default_instance() {
    return reinterpret_cast<const ZoneOpenRequest*>(
        &_ZoneOpenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ZoneOpenRequest& a, ZoneOpenRequest& b) { a.Swap(&b); }
  inline void Swap(ZoneOpenRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneOpenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneOpenRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ZoneOpenRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ZoneOpenRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ZoneOpenRequest& from) { ZoneOpenRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ZoneOpenRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.ZoneOpenRequest"; }

 protected:
  explicit ZoneOpenRequest(::google::protobuf::Arena* arena);
  ZoneOpenRequest(::google::protobuf::Arena* arena, const ZoneOpenRequest& from);
  ZoneOpenRequest(::google::protobuf::Arena* arena, ZoneOpenRequest&& from) noexcept
      : ZoneOpenRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWorldIdFieldNumber = 1,
    kZoneIdFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // int32 world_id = 1;
  void clear_world_id() ;
  ::int32_t world_id() const;
  void set_world_id(::int32_t value);

  private:
  ::int32_t _internal_world_id() const;
  void _internal_set_world_id(::int32_t value);

  public:
  // int32 zone_id = 2;
  void clear_zone_id() ;
  ::int32_t zone_id() const;
  void set_zone_id(::int32_t value);

  private:
  ::int32_t _internal_zone_id() const;
  void _internal_set_zone_id(::int32_t value);

  public:
  // int32 port = 3;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.ZoneOpenRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ZoneOpenRequest& from_msg);
    ::int32_t world_id_;
    ::int32_t zone_id_;
    ::int32_t port_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class ZoneCloseRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.ZoneCloseRequest) */ {
 public:
  inline ZoneCloseRequest() : ZoneCloseRequest(nullptr) {}
  ~ZoneCloseRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ZoneCloseRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ZoneCloseRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ZoneCloseRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ZoneCloseRequest(const ZoneCloseRequest& from) : ZoneCloseRequest(nullptr, from) {}
  inline ZoneCloseRequest(ZoneCloseRequest&& from) noexcept
      : ZoneCloseRequest(nullptr, std::move(from)) {}
  inline ZoneCloseRequest& operator=(const ZoneCloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneCloseRequest& operator=(ZoneCloseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneCloseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneCloseRequest* internal_default_instance() {
    return reinterpret_cast<const ZoneCloseRequest*>(
        &_ZoneCloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ZoneCloseRequest& a, ZoneCloseRequest& b) { a.Swap(&b); }
  inline void Swap(ZoneCloseRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneCloseRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneCloseRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ZoneCloseRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ZoneCloseRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ZoneCloseRequest& from) { ZoneCloseRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ZoneCloseRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.ZoneCloseRequest"; }

 protected:
  explicit ZoneCloseRequest(::google::protobuf::Arena* arena);
  ZoneCloseRequest(::google::protobuf::Arena* arena, const ZoneCloseRequest& from);
  ZoneCloseRequest(::google::protobuf::Arena* arena, ZoneCloseRequest&& from) noexcept
      : ZoneCloseRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWorldIdFieldNumber = 1,
    kZoneIdFieldNumber = 2,
  };
  // int32 world_id = 1;
  void clear_world_id() ;
  ::int32_t world_id() const;
  void set_world_id(::int32_t value);

  private:
  ::int32_t _internal_world_id() const;
  void _internal_set_world_id(::int32_t value);

  public:
  // int32 zone_id = 2;
  void clear_zone_id() ;
  ::int32_t zone_id() const;
  void set_zone_id(::int32_t value);

  private:
  ::int32_t _internal_zone_id() const;
  void _internal_set_zone_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.ZoneCloseRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ZoneCloseRequest& from_msg);
    ::int32_t world_id_;
    ::int32_t zone_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class WorldInfoRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:sunlight.api.WorldInfoRequest) */ {
 public:
  inline WorldInfoRequest() : WorldInfoRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WorldInfoRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WorldInfoRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorldInfoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorldInfoRequest(const WorldInfoRequest& from) : WorldInfoRequest(nullptr, from) {}
  inline WorldInfoRequest(WorldInfoRequest&& from) noexcept
      : WorldInfoRequest(nullptr, std::move(from)) {}
  inline WorldInfoRequest& operator=(const WorldInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldInfoRequest& operator=(WorldInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldInfoRequest* internal_default_instance() {
    return reinterpret_cast<const WorldInfoRequest*>(
        &_WorldInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(WorldInfoRequest& a, WorldInfoRequest& b) { a.Swap(&b); }
  inline void Swap(WorldInfoRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<WorldInfoRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WorldInfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WorldInfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.WorldInfoRequest"; }

 protected:
  explicit WorldInfoRequest(::google::protobuf::Arena* arena);
  WorldInfoRequest(::google::protobuf::Arena* arena, const WorldInfoRequest& from);
  WorldInfoRequest(::google::protobuf::Arena* arena, WorldInfoRequest&& from) noexcept
      : WorldInfoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:sunlight.api.WorldInfoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorldInfoRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class UserCountRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:sunlight.api.UserCountRequest) */ {
 public:
  inline UserCountRequest() : UserCountRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserCountRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserCountRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserCountRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserCountRequest(const UserCountRequest& from) : UserCountRequest(nullptr, from) {}
  inline UserCountRequest(UserCountRequest&& from) noexcept
      : UserCountRequest(nullptr, std::move(from)) {}
  inline UserCountRequest& operator=(const UserCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserCountRequest& operator=(UserCountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserCountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserCountRequest* internal_default_instance() {
    return reinterpret_cast<const UserCountRequest*>(
        &_UserCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(UserCountRequest& a, UserCountRequest& b) { a.Swap(&b); }
  inline void Swap(UserCountRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserCountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserCountRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<UserCountRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UserCountRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UserCountRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.UserCountRequest"; }

 protected:
  explicit UserCountRequest(::google::protobuf::Arena* arena);
  UserCountRequest(::google::protobuf::Arena* arena, const UserCountRequest& from);
  UserCountRequest(::google::protobuf::Arena* arena, UserCountRequest&& from) noexcept
      : UserCountRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:sunlight.api.UserCountRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserCountRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class SystemResourceInfoRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:sunlight.api.SystemResourceInfoRequest) */ {
 public:
  inline SystemResourceInfoRequest() : SystemResourceInfoRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SystemResourceInfoRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SystemResourceInfoRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SystemResourceInfoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SystemResourceInfoRequest(const SystemResourceInfoRequest& from) : SystemResourceInfoRequest(nullptr, from) {}
  inline SystemResourceInfoRequest(SystemResourceInfoRequest&& from) noexcept
      : SystemResourceInfoRequest(nullptr, std::move(from)) {}
  inline SystemResourceInfoRequest& operator=(const SystemResourceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemResourceInfoRequest& operator=(SystemResourceInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemResourceInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemResourceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SystemResourceInfoRequest*>(
        &_SystemResourceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SystemResourceInfoRequest& a, SystemResourceInfoRequest& b) { a.Swap(&b); }
  inline void Swap(SystemResourceInfoRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemResourceInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemResourceInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SystemResourceInfoRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SystemResourceInfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SystemResourceInfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.SystemResourceInfoRequest"; }

 protected:
  explicit SystemResourceInfoRequest(::google::protobuf::Arena* arena);
  SystemResourceInfoRequest(::google::protobuf::Arena* arena, const SystemResourceInfoRequest& from);
  SystemResourceInfoRequest(::google::protobuf::Arena* arena, SystemResourceInfoRequest&& from) noexcept
      : SystemResourceInfoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:sunlight.api.SystemResourceInfoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SystemResourceInfoRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class LogGetRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.LogGetRequest) */ {
 public:
  inline LogGetRequest() : LogGetRequest(nullptr) {}
  ~LogGetRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogGetRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogGetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogGetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogGetRequest(const LogGetRequest& from) : LogGetRequest(nullptr, from) {}
  inline LogGetRequest(LogGetRequest&& from) noexcept
      : LogGetRequest(nullptr, std::move(from)) {}
  inline LogGetRequest& operator=(const LogGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGetRequest& operator=(LogGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogGetRequest* internal_default_instance() {
    return reinterpret_cast<const LogGetRequest*>(
        &_LogGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(LogGetRequest& a, LogGetRequest& b) { a.Swap(&b); }
  inline void Swap(LogGetRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogGetRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogGetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogGetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogGetRequest& from) { LogGetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogGetRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.LogGetRequest"; }

 protected:
  explicit LogGetRequest(::google::protobuf::Arena* arena);
  LogGetRequest(::google::protobuf::Arena* arena, const LogGetRequest& from);
  LogGetRequest(::google::protobuf::Arena* arena, LogGetRequest&& from) noexcept
      : LogGetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogLevelFieldNumber = 1,
    kStartDateTimeFieldNumber = 2,
    kLastDateTimeFieldNumber = 3,
  };
  // repeated int32 log_level = 1;
  int log_level_size() const;
  private:
  int _internal_log_level_size() const;

  public:
  void clear_log_level() ;
  ::int32_t log_level(int index) const;
  void set_log_level(int index, ::int32_t value);
  void add_log_level(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& log_level() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_log_level();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_log_level() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_log_level();

  public:
  // optional int64 start_date_time = 2;
  bool has_start_date_time() const;
  void clear_start_date_time() ;
  ::int64_t start_date_time() const;
  void set_start_date_time(::int64_t value);

  private:
  ::int64_t _internal_start_date_time() const;
  void _internal_set_start_date_time(::int64_t value);

  public:
  // optional int64 last_date_time = 3;
  bool has_last_date_time() const;
  void clear_last_date_time() ;
  ::int64_t last_date_time() const;
  void set_last_date_time(::int64_t value);

  private:
  ::int64_t _internal_last_date_time() const;
  void _internal_set_last_date_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.LogGetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogGetRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> log_level_;
    ::google::protobuf::internal::CachedSize _log_level_cached_byte_size_;
    ::int64_t start_date_time_;
    ::int64_t last_date_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.AuthenticationRequest) */ {
 public:
  inline AuthenticationRequest() : AuthenticationRequest(nullptr) {}
  ~AuthenticationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthenticationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthenticationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthenticationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthenticationRequest(const AuthenticationRequest& from) : AuthenticationRequest(nullptr, from) {}
  inline AuthenticationRequest(AuthenticationRequest&& from) noexcept
      : AuthenticationRequest(nullptr, std::move(from)) {}
  inline AuthenticationRequest& operator=(const AuthenticationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationRequest& operator=(AuthenticationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticationRequest*>(
        &_AuthenticationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AuthenticationRequest& a, AuthenticationRequest& b) { a.Swap(&b); }
  inline void Swap(AuthenticationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthenticationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthenticationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthenticationRequest& from) { AuthenticationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthenticationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.AuthenticationRequest"; }

 protected:
  explicit AuthenticationRequest(::google::protobuf::Arena* arena);
  AuthenticationRequest(::google::protobuf::Arena* arena, const AuthenticationRequest& from);
  AuthenticationRequest(::google::protobuf::Arena* arena, AuthenticationRequest&& from) noexcept
      : AuthenticationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.AuthenticationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthenticationRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class AccountPasswordChangeRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.AccountPasswordChangeRequest) */ {
 public:
  inline AccountPasswordChangeRequest() : AccountPasswordChangeRequest(nullptr) {}
  ~AccountPasswordChangeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccountPasswordChangeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccountPasswordChangeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccountPasswordChangeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccountPasswordChangeRequest(const AccountPasswordChangeRequest& from) : AccountPasswordChangeRequest(nullptr, from) {}
  inline AccountPasswordChangeRequest(AccountPasswordChangeRequest&& from) noexcept
      : AccountPasswordChangeRequest(nullptr, std::move(from)) {}
  inline AccountPasswordChangeRequest& operator=(const AccountPasswordChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountPasswordChangeRequest& operator=(AccountPasswordChangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountPasswordChangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountPasswordChangeRequest* internal_default_instance() {
    return reinterpret_cast<const AccountPasswordChangeRequest*>(
        &_AccountPasswordChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AccountPasswordChangeRequest& a, AccountPasswordChangeRequest& b) { a.Swap(&b); }
  inline void Swap(AccountPasswordChangeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountPasswordChangeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountPasswordChangeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccountPasswordChangeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccountPasswordChangeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccountPasswordChangeRequest& from) { AccountPasswordChangeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccountPasswordChangeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.AccountPasswordChangeRequest"; }

 protected:
  explicit AccountPasswordChangeRequest(::google::protobuf::Arena* arena);
  AccountPasswordChangeRequest(::google::protobuf::Arena* arena, const AccountPasswordChangeRequest& from);
  AccountPasswordChangeRequest(::google::protobuf::Arena* arena, AccountPasswordChangeRequest&& from) noexcept
      : AccountPasswordChangeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.AccountPasswordChangeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccountPasswordChangeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class AccountCreationReuqest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.AccountCreationReuqest) */ {
 public:
  inline AccountCreationReuqest() : AccountCreationReuqest(nullptr) {}
  ~AccountCreationReuqest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccountCreationReuqest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccountCreationReuqest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccountCreationReuqest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccountCreationReuqest(const AccountCreationReuqest& from) : AccountCreationReuqest(nullptr, from) {}
  inline AccountCreationReuqest(AccountCreationReuqest&& from) noexcept
      : AccountCreationReuqest(nullptr, std::move(from)) {}
  inline AccountCreationReuqest& operator=(const AccountCreationReuqest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreationReuqest& operator=(AccountCreationReuqest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountCreationReuqest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountCreationReuqest* internal_default_instance() {
    return reinterpret_cast<const AccountCreationReuqest*>(
        &_AccountCreationReuqest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AccountCreationReuqest& a, AccountCreationReuqest& b) { a.Swap(&b); }
  inline void Swap(AccountCreationReuqest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreationReuqest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountCreationReuqest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccountCreationReuqest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccountCreationReuqest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccountCreationReuqest& from) { AccountCreationReuqest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccountCreationReuqest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.AccountCreationReuqest"; }

 protected:
  explicit AccountCreationReuqest(::google::protobuf::Arena* arena);
  AccountCreationReuqest(::google::protobuf::Arena* arena, const AccountCreationReuqest& from);
  AccountCreationReuqest(::google::protobuf::Arena* arena, AccountCreationReuqest&& from) noexcept
      : AccountCreationReuqest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kGmLevelFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // int32 gm_level = 3;
  void clear_gm_level() ;
  ::int32_t gm_level() const;
  void set_gm_level(::int32_t value);

  private:
  ::int32_t _internal_gm_level() const;
  void _internal_set_gm_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.AccountCreationReuqest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccountCreationReuqest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::int32_t gm_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class Request final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Request(
      ::google::protobuf::internal::ConstantInitialized);

  inline Request(const Request& from) : Request(nullptr, from) {}
  inline Request(Request&& from) noexcept
      : Request(nullptr, std::move(from)) {}
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAuthentication = 100,
    kAccountCreation = 101,
    kAccountPasswordChange = 102,
    kUserCount = 103,
    kSystemResourceInfo = 104,
    kWorldInfo = 105,
    kLogGet = 106,
    kZoneOpen = 107,
    kZoneClose = 108,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
        &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Request& a, Request& b) { a.Swap(&b); }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Request& from) { Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.Request"; }

 protected:
  explicit Request(::google::protobuf::Arena* arena);
  Request(::google::protobuf::Arena* arena, const Request& from);
  Request(::google::protobuf::Arena* arena, Request&& from) noexcept
      : Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
    kAuthenticationFieldNumber = 100,
    kAccountCreationFieldNumber = 101,
    kAccountPasswordChangeFieldNumber = 102,
    kUserCountFieldNumber = 103,
    kSystemResourceInfoFieldNumber = 104,
    kWorldInfoFieldNumber = 105,
    kLogGetFieldNumber = 106,
    kZoneOpenFieldNumber = 107,
    kZoneCloseFieldNumber = 108,
  };
  // int32 request_id = 1;
  void clear_request_id() ;
  ::int32_t request_id() const;
  void set_request_id(::int32_t value);

  private:
  ::int32_t _internal_request_id() const;
  void _internal_set_request_id(::int32_t value);

  public:
  // .sunlight.api.AuthenticationRequest authentication = 100;
  bool has_authentication() const;
  private:
  bool _internal_has_authentication() const;

  public:
  void clear_authentication() ;
  const ::sunlight::api::AuthenticationRequest& authentication() const;
  PROTOBUF_NODISCARD ::sunlight::api::AuthenticationRequest* release_authentication();
  ::sunlight::api::AuthenticationRequest* mutable_authentication();
  void set_allocated_authentication(::sunlight::api::AuthenticationRequest* value);
  void unsafe_arena_set_allocated_authentication(::sunlight::api::AuthenticationRequest* value);
  ::sunlight::api::AuthenticationRequest* unsafe_arena_release_authentication();

  private:
  const ::sunlight::api::AuthenticationRequest& _internal_authentication() const;
  ::sunlight::api::AuthenticationRequest* _internal_mutable_authentication();

  public:
  // .sunlight.api.AccountCreationReuqest account_creation = 101;
  bool has_account_creation() const;
  private:
  bool _internal_has_account_creation() const;

  public:
  void clear_account_creation() ;
  const ::sunlight::api::AccountCreationReuqest& account_creation() const;
  PROTOBUF_NODISCARD ::sunlight::api::AccountCreationReuqest* release_account_creation();
  ::sunlight::api::AccountCreationReuqest* mutable_account_creation();
  void set_allocated_account_creation(::sunlight::api::AccountCreationReuqest* value);
  void unsafe_arena_set_allocated_account_creation(::sunlight::api::AccountCreationReuqest* value);
  ::sunlight::api::AccountCreationReuqest* unsafe_arena_release_account_creation();

  private:
  const ::sunlight::api::AccountCreationReuqest& _internal_account_creation() const;
  ::sunlight::api::AccountCreationReuqest* _internal_mutable_account_creation();

  public:
  // .sunlight.api.AccountPasswordChangeRequest account_password_change = 102;
  bool has_account_password_change() const;
  private:
  bool _internal_has_account_password_change() const;

  public:
  void clear_account_password_change() ;
  const ::sunlight::api::AccountPasswordChangeRequest& account_password_change() const;
  PROTOBUF_NODISCARD ::sunlight::api::AccountPasswordChangeRequest* release_account_password_change();
  ::sunlight::api::AccountPasswordChangeRequest* mutable_account_password_change();
  void set_allocated_account_password_change(::sunlight::api::AccountPasswordChangeRequest* value);
  void unsafe_arena_set_allocated_account_password_change(::sunlight::api::AccountPasswordChangeRequest* value);
  ::sunlight::api::AccountPasswordChangeRequest* unsafe_arena_release_account_password_change();

  private:
  const ::sunlight::api::AccountPasswordChangeRequest& _internal_account_password_change() const;
  ::sunlight::api::AccountPasswordChangeRequest* _internal_mutable_account_password_change();

  public:
  // .sunlight.api.UserCountRequest user_count = 103;
  bool has_user_count() const;
  private:
  bool _internal_has_user_count() const;

  public:
  void clear_user_count() ;
  const ::sunlight::api::UserCountRequest& user_count() const;
  PROTOBUF_NODISCARD ::sunlight::api::UserCountRequest* release_user_count();
  ::sunlight::api::UserCountRequest* mutable_user_count();
  void set_allocated_user_count(::sunlight::api::UserCountRequest* value);
  void unsafe_arena_set_allocated_user_count(::sunlight::api::UserCountRequest* value);
  ::sunlight::api::UserCountRequest* unsafe_arena_release_user_count();

  private:
  const ::sunlight::api::UserCountRequest& _internal_user_count() const;
  ::sunlight::api::UserCountRequest* _internal_mutable_user_count();

  public:
  // .sunlight.api.SystemResourceInfoRequest system_resource_info = 104;
  bool has_system_resource_info() const;
  private:
  bool _internal_has_system_resource_info() const;

  public:
  void clear_system_resource_info() ;
  const ::sunlight::api::SystemResourceInfoRequest& system_resource_info() const;
  PROTOBUF_NODISCARD ::sunlight::api::SystemResourceInfoRequest* release_system_resource_info();
  ::sunlight::api::SystemResourceInfoRequest* mutable_system_resource_info();
  void set_allocated_system_resource_info(::sunlight::api::SystemResourceInfoRequest* value);
  void unsafe_arena_set_allocated_system_resource_info(::sunlight::api::SystemResourceInfoRequest* value);
  ::sunlight::api::SystemResourceInfoRequest* unsafe_arena_release_system_resource_info();

  private:
  const ::sunlight::api::SystemResourceInfoRequest& _internal_system_resource_info() const;
  ::sunlight::api::SystemResourceInfoRequest* _internal_mutable_system_resource_info();

  public:
  // .sunlight.api.WorldInfoRequest world_info = 105;
  bool has_world_info() const;
  private:
  bool _internal_has_world_info() const;

  public:
  void clear_world_info() ;
  const ::sunlight::api::WorldInfoRequest& world_info() const;
  PROTOBUF_NODISCARD ::sunlight::api::WorldInfoRequest* release_world_info();
  ::sunlight::api::WorldInfoRequest* mutable_world_info();
  void set_allocated_world_info(::sunlight::api::WorldInfoRequest* value);
  void unsafe_arena_set_allocated_world_info(::sunlight::api::WorldInfoRequest* value);
  ::sunlight::api::WorldInfoRequest* unsafe_arena_release_world_info();

  private:
  const ::sunlight::api::WorldInfoRequest& _internal_world_info() const;
  ::sunlight::api::WorldInfoRequest* _internal_mutable_world_info();

  public:
  // .sunlight.api.LogGetRequest log_get = 106;
  bool has_log_get() const;
  private:
  bool _internal_has_log_get() const;

  public:
  void clear_log_get() ;
  const ::sunlight::api::LogGetRequest& log_get() const;
  PROTOBUF_NODISCARD ::sunlight::api::LogGetRequest* release_log_get();
  ::sunlight::api::LogGetRequest* mutable_log_get();
  void set_allocated_log_get(::sunlight::api::LogGetRequest* value);
  void unsafe_arena_set_allocated_log_get(::sunlight::api::LogGetRequest* value);
  ::sunlight::api::LogGetRequest* unsafe_arena_release_log_get();

  private:
  const ::sunlight::api::LogGetRequest& _internal_log_get() const;
  ::sunlight::api::LogGetRequest* _internal_mutable_log_get();

  public:
  // .sunlight.api.ZoneOpenRequest zone_open = 107;
  bool has_zone_open() const;
  private:
  bool _internal_has_zone_open() const;

  public:
  void clear_zone_open() ;
  const ::sunlight::api::ZoneOpenRequest& zone_open() const;
  PROTOBUF_NODISCARD ::sunlight::api::ZoneOpenRequest* release_zone_open();
  ::sunlight::api::ZoneOpenRequest* mutable_zone_open();
  void set_allocated_zone_open(::sunlight::api::ZoneOpenRequest* value);
  void unsafe_arena_set_allocated_zone_open(::sunlight::api::ZoneOpenRequest* value);
  ::sunlight::api::ZoneOpenRequest* unsafe_arena_release_zone_open();

  private:
  const ::sunlight::api::ZoneOpenRequest& _internal_zone_open() const;
  ::sunlight::api::ZoneOpenRequest* _internal_mutable_zone_open();

  public:
  // .sunlight.api.ZoneCloseRequest zone_close = 108;
  bool has_zone_close() const;
  private:
  bool _internal_has_zone_close() const;

  public:
  void clear_zone_close() ;
  const ::sunlight::api::ZoneCloseRequest& zone_close() const;
  PROTOBUF_NODISCARD ::sunlight::api::ZoneCloseRequest* release_zone_close();
  ::sunlight::api::ZoneCloseRequest* mutable_zone_close();
  void set_allocated_zone_close(::sunlight::api::ZoneCloseRequest* value);
  void unsafe_arena_set_allocated_zone_close(::sunlight::api::ZoneCloseRequest* value);
  ::sunlight::api::ZoneCloseRequest* unsafe_arena_release_zone_close();

  private:
  const ::sunlight::api::ZoneCloseRequest& _internal_zone_close() const;
  ::sunlight::api::ZoneCloseRequest* _internal_mutable_zone_close();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:sunlight.api.Request)
 private:
  class _Internal;
  void set_has_authentication();
  void set_has_account_creation();
  void set_has_account_password_change();
  void set_has_user_count();
  void set_has_system_resource_info();
  void set_has_world_info();
  void set_has_log_get();
  void set_has_zone_open();
  void set_has_zone_close();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 10, 9,
      0, 7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Request& from_msg);
    ::int32_t request_id_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sunlight::api::AuthenticationRequest* authentication_;
      ::sunlight::api::AccountCreationReuqest* account_creation_;
      ::sunlight::api::AccountPasswordChangeRequest* account_password_change_;
      ::sunlight::api::UserCountRequest* user_count_;
      ::sunlight::api::SystemResourceInfoRequest* system_resource_info_;
      ::sunlight::api::WorldInfoRequest* world_info_;
      ::sunlight::api::LogGetRequest* log_get_;
      ::sunlight::api::ZoneOpenRequest* zone_open_;
      ::sunlight::api::ZoneCloseRequest* zone_close_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AuthenticationRequest

// string id = 1;
inline void AuthenticationRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.AuthenticationRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.AuthenticationRequest.id)
}
inline std::string* AuthenticationRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sunlight.api.AuthenticationRequest.id)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void AuthenticationRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* AuthenticationRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* AuthenticationRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.AuthenticationRequest.id)
  return _impl_.id_.Release();
}
inline void AuthenticationRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.AuthenticationRequest.id)
}

// string password = 2;
inline void AuthenticationRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.AuthenticationRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.AuthenticationRequest.password)
}
inline std::string* AuthenticationRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:sunlight.api.AuthenticationRequest.password)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void AuthenticationRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* AuthenticationRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* AuthenticationRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.AuthenticationRequest.password)
  return _impl_.password_.Release();
}
inline void AuthenticationRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.AuthenticationRequest.password)
}

// -------------------------------------------------------------------

// AccountCreationReuqest

// string id = 1;
inline void AccountCreationReuqest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AccountCreationReuqest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountCreationReuqest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountCreationReuqest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.AccountCreationReuqest.id)
}
inline std::string* AccountCreationReuqest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sunlight.api.AccountCreationReuqest.id)
  return _s;
}
inline const std::string& AccountCreationReuqest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void AccountCreationReuqest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* AccountCreationReuqest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* AccountCreationReuqest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.AccountCreationReuqest.id)
  return _impl_.id_.Release();
}
inline void AccountCreationReuqest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.AccountCreationReuqest.id)
}

// string password = 2;
inline void AccountCreationReuqest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& AccountCreationReuqest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountCreationReuqest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountCreationReuqest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.AccountCreationReuqest.password)
}
inline std::string* AccountCreationReuqest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:sunlight.api.AccountCreationReuqest.password)
  return _s;
}
inline const std::string& AccountCreationReuqest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void AccountCreationReuqest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* AccountCreationReuqest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* AccountCreationReuqest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.AccountCreationReuqest.password)
  return _impl_.password_.Release();
}
inline void AccountCreationReuqest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.AccountCreationReuqest.password)
}

// int32 gm_level = 3;
inline void AccountCreationReuqest::clear_gm_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gm_level_ = 0;
}
inline ::int32_t AccountCreationReuqest::gm_level() const {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountCreationReuqest.gm_level)
  return _internal_gm_level();
}
inline void AccountCreationReuqest::set_gm_level(::int32_t value) {
  _internal_set_gm_level(value);
  // @@protoc_insertion_point(field_set:sunlight.api.AccountCreationReuqest.gm_level)
}
inline ::int32_t AccountCreationReuqest::_internal_gm_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gm_level_;
}
inline void AccountCreationReuqest::_internal_set_gm_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gm_level_ = value;
}

// -------------------------------------------------------------------

// AccountPasswordChangeRequest

// string id = 1;
inline void AccountPasswordChangeRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AccountPasswordChangeRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountPasswordChangeRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPasswordChangeRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.AccountPasswordChangeRequest.id)
}
inline std::string* AccountPasswordChangeRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sunlight.api.AccountPasswordChangeRequest.id)
  return _s;
}
inline const std::string& AccountPasswordChangeRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void AccountPasswordChangeRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* AccountPasswordChangeRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* AccountPasswordChangeRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.AccountPasswordChangeRequest.id)
  return _impl_.id_.Release();
}
inline void AccountPasswordChangeRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.AccountPasswordChangeRequest.id)
}

// string password = 2;
inline void AccountPasswordChangeRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& AccountPasswordChangeRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountPasswordChangeRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPasswordChangeRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.AccountPasswordChangeRequest.password)
}
inline std::string* AccountPasswordChangeRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:sunlight.api.AccountPasswordChangeRequest.password)
  return _s;
}
inline const std::string& AccountPasswordChangeRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void AccountPasswordChangeRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* AccountPasswordChangeRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* AccountPasswordChangeRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.AccountPasswordChangeRequest.password)
  return _impl_.password_.Release();
}
inline void AccountPasswordChangeRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.AccountPasswordChangeRequest.password)
}

// -------------------------------------------------------------------

// UserCountRequest

// -------------------------------------------------------------------

// SystemResourceInfoRequest

// -------------------------------------------------------------------

// WorldInfoRequest

// -------------------------------------------------------------------

// LogGetRequest

// repeated int32 log_level = 1;
inline int LogGetRequest::_internal_log_level_size() const {
  return _internal_log_level().size();
}
inline int LogGetRequest::log_level_size() const {
  return _internal_log_level_size();
}
inline void LogGetRequest::clear_log_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_level_.Clear();
}
inline ::int32_t LogGetRequest::log_level(int index) const {
  // @@protoc_insertion_point(field_get:sunlight.api.LogGetRequest.log_level)
  return _internal_log_level().Get(index);
}
inline void LogGetRequest::set_log_level(int index, ::int32_t value) {
  _internal_mutable_log_level()->Set(index, value);
  // @@protoc_insertion_point(field_set:sunlight.api.LogGetRequest.log_level)
}
inline void LogGetRequest::add_log_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_log_level()->Add(value);
  // @@protoc_insertion_point(field_add:sunlight.api.LogGetRequest.log_level)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LogGetRequest::log_level() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sunlight.api.LogGetRequest.log_level)
  return _internal_log_level();
}
inline ::google::protobuf::RepeatedField<::int32_t>* LogGetRequest::mutable_log_level()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sunlight.api.LogGetRequest.log_level)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_log_level();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
LogGetRequest::_internal_log_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_level_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* LogGetRequest::_internal_mutable_log_level() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.log_level_;
}

// optional int64 start_date_time = 2;
inline bool LogGetRequest::has_start_date_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LogGetRequest::clear_start_date_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_date_time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t LogGetRequest::start_date_time() const {
  // @@protoc_insertion_point(field_get:sunlight.api.LogGetRequest.start_date_time)
  return _internal_start_date_time();
}
inline void LogGetRequest::set_start_date_time(::int64_t value) {
  _internal_set_start_date_time(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:sunlight.api.LogGetRequest.start_date_time)
}
inline ::int64_t LogGetRequest::_internal_start_date_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_date_time_;
}
inline void LogGetRequest::_internal_set_start_date_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_date_time_ = value;
}

// optional int64 last_date_time = 3;
inline bool LogGetRequest::has_last_date_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LogGetRequest::clear_last_date_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_date_time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t LogGetRequest::last_date_time() const {
  // @@protoc_insertion_point(field_get:sunlight.api.LogGetRequest.last_date_time)
  return _internal_last_date_time();
}
inline void LogGetRequest::set_last_date_time(::int64_t value) {
  _internal_set_last_date_time(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:sunlight.api.LogGetRequest.last_date_time)
}
inline ::int64_t LogGetRequest::_internal_last_date_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_date_time_;
}
inline void LogGetRequest::_internal_set_last_date_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_date_time_ = value;
}

// -------------------------------------------------------------------

// ZoneOpenRequest

// int32 world_id = 1;
inline void ZoneOpenRequest::clear_world_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.world_id_ = 0;
}
inline ::int32_t ZoneOpenRequest::world_id() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneOpenRequest.world_id)
  return _internal_world_id();
}
inline void ZoneOpenRequest::set_world_id(::int32_t value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneOpenRequest.world_id)
}
inline ::int32_t ZoneOpenRequest::_internal_world_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.world_id_;
}
inline void ZoneOpenRequest::_internal_set_world_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.world_id_ = value;
}

// int32 zone_id = 2;
inline void ZoneOpenRequest::clear_zone_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zone_id_ = 0;
}
inline ::int32_t ZoneOpenRequest::zone_id() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneOpenRequest.zone_id)
  return _internal_zone_id();
}
inline void ZoneOpenRequest::set_zone_id(::int32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneOpenRequest.zone_id)
}
inline ::int32_t ZoneOpenRequest::_internal_zone_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zone_id_;
}
inline void ZoneOpenRequest::_internal_set_zone_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zone_id_ = value;
}

// int32 port = 3;
inline void ZoneOpenRequest::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0;
}
inline ::int32_t ZoneOpenRequest::port() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneOpenRequest.port)
  return _internal_port();
}
inline void ZoneOpenRequest::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneOpenRequest.port)
}
inline ::int32_t ZoneOpenRequest::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void ZoneOpenRequest::_internal_set_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// ZoneCloseRequest

// int32 world_id = 1;
inline void ZoneCloseRequest::clear_world_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.world_id_ = 0;
}
inline ::int32_t ZoneCloseRequest::world_id() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneCloseRequest.world_id)
  return _internal_world_id();
}
inline void ZoneCloseRequest::set_world_id(::int32_t value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneCloseRequest.world_id)
}
inline ::int32_t ZoneCloseRequest::_internal_world_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.world_id_;
}
inline void ZoneCloseRequest::_internal_set_world_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.world_id_ = value;
}

// int32 zone_id = 2;
inline void ZoneCloseRequest::clear_zone_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zone_id_ = 0;
}
inline ::int32_t ZoneCloseRequest::zone_id() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneCloseRequest.zone_id)
  return _internal_zone_id();
}
inline void ZoneCloseRequest::set_zone_id(::int32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneCloseRequest.zone_id)
}
inline ::int32_t ZoneCloseRequest::_internal_zone_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zone_id_;
}
inline void ZoneCloseRequest::_internal_set_zone_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zone_id_ = value;
}

// -------------------------------------------------------------------

// Request

// int32 request_id = 1;
inline void Request::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = 0;
}
inline ::int32_t Request::request_id() const {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.request_id)
  return _internal_request_id();
}
inline void Request::set_request_id(::int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:sunlight.api.Request.request_id)
}
inline ::int32_t Request::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_;
}
inline void Request::_internal_set_request_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = value;
}

// .sunlight.api.AuthenticationRequest authentication = 100;
inline bool Request::has_authentication() const {
  return payload_case() == kAuthentication;
}
inline bool Request::_internal_has_authentication() const {
  return payload_case() == kAuthentication;
}
inline void Request::set_has_authentication() {
  _impl_._oneof_case_[0] = kAuthentication;
}
inline void Request::clear_authentication() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAuthentication) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.authentication_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.authentication_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::AuthenticationRequest* Request::release_authentication() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.authentication)
  if (payload_case() == kAuthentication) {
    clear_has_payload();
    auto* temp = _impl_.payload_.authentication_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.authentication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::AuthenticationRequest& Request::_internal_authentication() const {
  return payload_case() == kAuthentication ? *_impl_.payload_.authentication_ : reinterpret_cast<::sunlight::api::AuthenticationRequest&>(::sunlight::api::_AuthenticationRequest_default_instance_);
}
inline const ::sunlight::api::AuthenticationRequest& Request::authentication() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.authentication)
  return _internal_authentication();
}
inline ::sunlight::api::AuthenticationRequest* Request::unsafe_arena_release_authentication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.authentication)
  if (payload_case() == kAuthentication) {
    clear_has_payload();
    auto* temp = _impl_.payload_.authentication_;
    _impl_.payload_.authentication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_authentication(::sunlight::api::AuthenticationRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_authentication();
    _impl_.payload_.authentication_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.authentication)
}
inline ::sunlight::api::AuthenticationRequest* Request::_internal_mutable_authentication() {
  if (payload_case() != kAuthentication) {
    clear_payload();
    set_has_authentication();
    _impl_.payload_.authentication_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::AuthenticationRequest>(GetArena());
  }
  return _impl_.payload_.authentication_;
}
inline ::sunlight::api::AuthenticationRequest* Request::mutable_authentication() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::AuthenticationRequest* _msg = _internal_mutable_authentication();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.authentication)
  return _msg;
}

// .sunlight.api.AccountCreationReuqest account_creation = 101;
inline bool Request::has_account_creation() const {
  return payload_case() == kAccountCreation;
}
inline bool Request::_internal_has_account_creation() const {
  return payload_case() == kAccountCreation;
}
inline void Request::set_has_account_creation() {
  _impl_._oneof_case_[0] = kAccountCreation;
}
inline void Request::clear_account_creation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAccountCreation) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.account_creation_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.account_creation_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::AccountCreationReuqest* Request::release_account_creation() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.account_creation)
  if (payload_case() == kAccountCreation) {
    clear_has_payload();
    auto* temp = _impl_.payload_.account_creation_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.account_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::AccountCreationReuqest& Request::_internal_account_creation() const {
  return payload_case() == kAccountCreation ? *_impl_.payload_.account_creation_ : reinterpret_cast<::sunlight::api::AccountCreationReuqest&>(::sunlight::api::_AccountCreationReuqest_default_instance_);
}
inline const ::sunlight::api::AccountCreationReuqest& Request::account_creation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.account_creation)
  return _internal_account_creation();
}
inline ::sunlight::api::AccountCreationReuqest* Request::unsafe_arena_release_account_creation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.account_creation)
  if (payload_case() == kAccountCreation) {
    clear_has_payload();
    auto* temp = _impl_.payload_.account_creation_;
    _impl_.payload_.account_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_account_creation(::sunlight::api::AccountCreationReuqest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_account_creation();
    _impl_.payload_.account_creation_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.account_creation)
}
inline ::sunlight::api::AccountCreationReuqest* Request::_internal_mutable_account_creation() {
  if (payload_case() != kAccountCreation) {
    clear_payload();
    set_has_account_creation();
    _impl_.payload_.account_creation_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::AccountCreationReuqest>(GetArena());
  }
  return _impl_.payload_.account_creation_;
}
inline ::sunlight::api::AccountCreationReuqest* Request::mutable_account_creation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::AccountCreationReuqest* _msg = _internal_mutable_account_creation();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.account_creation)
  return _msg;
}

// .sunlight.api.AccountPasswordChangeRequest account_password_change = 102;
inline bool Request::has_account_password_change() const {
  return payload_case() == kAccountPasswordChange;
}
inline bool Request::_internal_has_account_password_change() const {
  return payload_case() == kAccountPasswordChange;
}
inline void Request::set_has_account_password_change() {
  _impl_._oneof_case_[0] = kAccountPasswordChange;
}
inline void Request::clear_account_password_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAccountPasswordChange) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.account_password_change_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.account_password_change_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::AccountPasswordChangeRequest* Request::release_account_password_change() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.account_password_change)
  if (payload_case() == kAccountPasswordChange) {
    clear_has_payload();
    auto* temp = _impl_.payload_.account_password_change_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.account_password_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::AccountPasswordChangeRequest& Request::_internal_account_password_change() const {
  return payload_case() == kAccountPasswordChange ? *_impl_.payload_.account_password_change_ : reinterpret_cast<::sunlight::api::AccountPasswordChangeRequest&>(::sunlight::api::_AccountPasswordChangeRequest_default_instance_);
}
inline const ::sunlight::api::AccountPasswordChangeRequest& Request::account_password_change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.account_password_change)
  return _internal_account_password_change();
}
inline ::sunlight::api::AccountPasswordChangeRequest* Request::unsafe_arena_release_account_password_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.account_password_change)
  if (payload_case() == kAccountPasswordChange) {
    clear_has_payload();
    auto* temp = _impl_.payload_.account_password_change_;
    _impl_.payload_.account_password_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_account_password_change(::sunlight::api::AccountPasswordChangeRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_account_password_change();
    _impl_.payload_.account_password_change_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.account_password_change)
}
inline ::sunlight::api::AccountPasswordChangeRequest* Request::_internal_mutable_account_password_change() {
  if (payload_case() != kAccountPasswordChange) {
    clear_payload();
    set_has_account_password_change();
    _impl_.payload_.account_password_change_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::AccountPasswordChangeRequest>(GetArena());
  }
  return _impl_.payload_.account_password_change_;
}
inline ::sunlight::api::AccountPasswordChangeRequest* Request::mutable_account_password_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::AccountPasswordChangeRequest* _msg = _internal_mutable_account_password_change();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.account_password_change)
  return _msg;
}

// .sunlight.api.UserCountRequest user_count = 103;
inline bool Request::has_user_count() const {
  return payload_case() == kUserCount;
}
inline bool Request::_internal_has_user_count() const {
  return payload_case() == kUserCount;
}
inline void Request::set_has_user_count() {
  _impl_._oneof_case_[0] = kUserCount;
}
inline void Request::clear_user_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kUserCount) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.user_count_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.user_count_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::UserCountRequest* Request::release_user_count() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.user_count)
  if (payload_case() == kUserCount) {
    clear_has_payload();
    auto* temp = _impl_.payload_.user_count_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.user_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::UserCountRequest& Request::_internal_user_count() const {
  return payload_case() == kUserCount ? *_impl_.payload_.user_count_ : reinterpret_cast<::sunlight::api::UserCountRequest&>(::sunlight::api::_UserCountRequest_default_instance_);
}
inline const ::sunlight::api::UserCountRequest& Request::user_count() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.user_count)
  return _internal_user_count();
}
inline ::sunlight::api::UserCountRequest* Request::unsafe_arena_release_user_count() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.user_count)
  if (payload_case() == kUserCount) {
    clear_has_payload();
    auto* temp = _impl_.payload_.user_count_;
    _impl_.payload_.user_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_user_count(::sunlight::api::UserCountRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_user_count();
    _impl_.payload_.user_count_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.user_count)
}
inline ::sunlight::api::UserCountRequest* Request::_internal_mutable_user_count() {
  if (payload_case() != kUserCount) {
    clear_payload();
    set_has_user_count();
    _impl_.payload_.user_count_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::UserCountRequest>(GetArena());
  }
  return _impl_.payload_.user_count_;
}
inline ::sunlight::api::UserCountRequest* Request::mutable_user_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::UserCountRequest* _msg = _internal_mutable_user_count();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.user_count)
  return _msg;
}

// .sunlight.api.SystemResourceInfoRequest system_resource_info = 104;
inline bool Request::has_system_resource_info() const {
  return payload_case() == kSystemResourceInfo;
}
inline bool Request::_internal_has_system_resource_info() const {
  return payload_case() == kSystemResourceInfo;
}
inline void Request::set_has_system_resource_info() {
  _impl_._oneof_case_[0] = kSystemResourceInfo;
}
inline void Request::clear_system_resource_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSystemResourceInfo) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.system_resource_info_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.system_resource_info_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::SystemResourceInfoRequest* Request::release_system_resource_info() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.system_resource_info)
  if (payload_case() == kSystemResourceInfo) {
    clear_has_payload();
    auto* temp = _impl_.payload_.system_resource_info_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.system_resource_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::SystemResourceInfoRequest& Request::_internal_system_resource_info() const {
  return payload_case() == kSystemResourceInfo ? *_impl_.payload_.system_resource_info_ : reinterpret_cast<::sunlight::api::SystemResourceInfoRequest&>(::sunlight::api::_SystemResourceInfoRequest_default_instance_);
}
inline const ::sunlight::api::SystemResourceInfoRequest& Request::system_resource_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.system_resource_info)
  return _internal_system_resource_info();
}
inline ::sunlight::api::SystemResourceInfoRequest* Request::unsafe_arena_release_system_resource_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.system_resource_info)
  if (payload_case() == kSystemResourceInfo) {
    clear_has_payload();
    auto* temp = _impl_.payload_.system_resource_info_;
    _impl_.payload_.system_resource_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_system_resource_info(::sunlight::api::SystemResourceInfoRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_system_resource_info();
    _impl_.payload_.system_resource_info_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.system_resource_info)
}
inline ::sunlight::api::SystemResourceInfoRequest* Request::_internal_mutable_system_resource_info() {
  if (payload_case() != kSystemResourceInfo) {
    clear_payload();
    set_has_system_resource_info();
    _impl_.payload_.system_resource_info_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::SystemResourceInfoRequest>(GetArena());
  }
  return _impl_.payload_.system_resource_info_;
}
inline ::sunlight::api::SystemResourceInfoRequest* Request::mutable_system_resource_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::SystemResourceInfoRequest* _msg = _internal_mutable_system_resource_info();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.system_resource_info)
  return _msg;
}

// .sunlight.api.WorldInfoRequest world_info = 105;
inline bool Request::has_world_info() const {
  return payload_case() == kWorldInfo;
}
inline bool Request::_internal_has_world_info() const {
  return payload_case() == kWorldInfo;
}
inline void Request::set_has_world_info() {
  _impl_._oneof_case_[0] = kWorldInfo;
}
inline void Request::clear_world_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kWorldInfo) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.world_info_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.world_info_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::WorldInfoRequest* Request::release_world_info() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.world_info)
  if (payload_case() == kWorldInfo) {
    clear_has_payload();
    auto* temp = _impl_.payload_.world_info_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.world_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::WorldInfoRequest& Request::_internal_world_info() const {
  return payload_case() == kWorldInfo ? *_impl_.payload_.world_info_ : reinterpret_cast<::sunlight::api::WorldInfoRequest&>(::sunlight::api::_WorldInfoRequest_default_instance_);
}
inline const ::sunlight::api::WorldInfoRequest& Request::world_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.world_info)
  return _internal_world_info();
}
inline ::sunlight::api::WorldInfoRequest* Request::unsafe_arena_release_world_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.world_info)
  if (payload_case() == kWorldInfo) {
    clear_has_payload();
    auto* temp = _impl_.payload_.world_info_;
    _impl_.payload_.world_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_world_info(::sunlight::api::WorldInfoRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_world_info();
    _impl_.payload_.world_info_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.world_info)
}
inline ::sunlight::api::WorldInfoRequest* Request::_internal_mutable_world_info() {
  if (payload_case() != kWorldInfo) {
    clear_payload();
    set_has_world_info();
    _impl_.payload_.world_info_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::WorldInfoRequest>(GetArena());
  }
  return _impl_.payload_.world_info_;
}
inline ::sunlight::api::WorldInfoRequest* Request::mutable_world_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::WorldInfoRequest* _msg = _internal_mutable_world_info();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.world_info)
  return _msg;
}

// .sunlight.api.LogGetRequest log_get = 106;
inline bool Request::has_log_get() const {
  return payload_case() == kLogGet;
}
inline bool Request::_internal_has_log_get() const {
  return payload_case() == kLogGet;
}
inline void Request::set_has_log_get() {
  _impl_._oneof_case_[0] = kLogGet;
}
inline void Request::clear_log_get() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kLogGet) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.log_get_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.log_get_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::LogGetRequest* Request::release_log_get() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.log_get)
  if (payload_case() == kLogGet) {
    clear_has_payload();
    auto* temp = _impl_.payload_.log_get_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.log_get_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::LogGetRequest& Request::_internal_log_get() const {
  return payload_case() == kLogGet ? *_impl_.payload_.log_get_ : reinterpret_cast<::sunlight::api::LogGetRequest&>(::sunlight::api::_LogGetRequest_default_instance_);
}
inline const ::sunlight::api::LogGetRequest& Request::log_get() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.log_get)
  return _internal_log_get();
}
inline ::sunlight::api::LogGetRequest* Request::unsafe_arena_release_log_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.log_get)
  if (payload_case() == kLogGet) {
    clear_has_payload();
    auto* temp = _impl_.payload_.log_get_;
    _impl_.payload_.log_get_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_log_get(::sunlight::api::LogGetRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_log_get();
    _impl_.payload_.log_get_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.log_get)
}
inline ::sunlight::api::LogGetRequest* Request::_internal_mutable_log_get() {
  if (payload_case() != kLogGet) {
    clear_payload();
    set_has_log_get();
    _impl_.payload_.log_get_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::LogGetRequest>(GetArena());
  }
  return _impl_.payload_.log_get_;
}
inline ::sunlight::api::LogGetRequest* Request::mutable_log_get() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::LogGetRequest* _msg = _internal_mutable_log_get();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.log_get)
  return _msg;
}

// .sunlight.api.ZoneOpenRequest zone_open = 107;
inline bool Request::has_zone_open() const {
  return payload_case() == kZoneOpen;
}
inline bool Request::_internal_has_zone_open() const {
  return payload_case() == kZoneOpen;
}
inline void Request::set_has_zone_open() {
  _impl_._oneof_case_[0] = kZoneOpen;
}
inline void Request::clear_zone_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kZoneOpen) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.zone_open_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.zone_open_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::ZoneOpenRequest* Request::release_zone_open() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.zone_open)
  if (payload_case() == kZoneOpen) {
    clear_has_payload();
    auto* temp = _impl_.payload_.zone_open_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.zone_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::ZoneOpenRequest& Request::_internal_zone_open() const {
  return payload_case() == kZoneOpen ? *_impl_.payload_.zone_open_ : reinterpret_cast<::sunlight::api::ZoneOpenRequest&>(::sunlight::api::_ZoneOpenRequest_default_instance_);
}
inline const ::sunlight::api::ZoneOpenRequest& Request::zone_open() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.zone_open)
  return _internal_zone_open();
}
inline ::sunlight::api::ZoneOpenRequest* Request::unsafe_arena_release_zone_open() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.zone_open)
  if (payload_case() == kZoneOpen) {
    clear_has_payload();
    auto* temp = _impl_.payload_.zone_open_;
    _impl_.payload_.zone_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_zone_open(::sunlight::api::ZoneOpenRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_zone_open();
    _impl_.payload_.zone_open_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.zone_open)
}
inline ::sunlight::api::ZoneOpenRequest* Request::_internal_mutable_zone_open() {
  if (payload_case() != kZoneOpen) {
    clear_payload();
    set_has_zone_open();
    _impl_.payload_.zone_open_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::ZoneOpenRequest>(GetArena());
  }
  return _impl_.payload_.zone_open_;
}
inline ::sunlight::api::ZoneOpenRequest* Request::mutable_zone_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::ZoneOpenRequest* _msg = _internal_mutable_zone_open();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.zone_open)
  return _msg;
}

// .sunlight.api.ZoneCloseRequest zone_close = 108;
inline bool Request::has_zone_close() const {
  return payload_case() == kZoneClose;
}
inline bool Request::_internal_has_zone_close() const {
  return payload_case() == kZoneClose;
}
inline void Request::set_has_zone_close() {
  _impl_._oneof_case_[0] = kZoneClose;
}
inline void Request::clear_zone_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kZoneClose) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.zone_close_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.zone_close_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::ZoneCloseRequest* Request::release_zone_close() {
  // @@protoc_insertion_point(field_release:sunlight.api.Request.zone_close)
  if (payload_case() == kZoneClose) {
    clear_has_payload();
    auto* temp = _impl_.payload_.zone_close_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.zone_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::ZoneCloseRequest& Request::_internal_zone_close() const {
  return payload_case() == kZoneClose ? *_impl_.payload_.zone_close_ : reinterpret_cast<::sunlight::api::ZoneCloseRequest&>(::sunlight::api::_ZoneCloseRequest_default_instance_);
}
inline const ::sunlight::api::ZoneCloseRequest& Request::zone_close() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Request.zone_close)
  return _internal_zone_close();
}
inline ::sunlight::api::ZoneCloseRequest* Request::unsafe_arena_release_zone_close() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Request.zone_close)
  if (payload_case() == kZoneClose) {
    clear_has_payload();
    auto* temp = _impl_.payload_.zone_close_;
    _impl_.payload_.zone_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_zone_close(::sunlight::api::ZoneCloseRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_zone_close();
    _impl_.payload_.zone_close_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Request.zone_close)
}
inline ::sunlight::api::ZoneCloseRequest* Request::_internal_mutable_zone_close() {
  if (payload_case() != kZoneClose) {
    clear_payload();
    set_has_zone_close();
    _impl_.payload_.zone_close_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::ZoneCloseRequest>(GetArena());
  }
  return _impl_.payload_.zone_close_;
}
inline ::sunlight::api::ZoneCloseRequest* Request::mutable_zone_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::ZoneCloseRequest* _msg = _internal_mutable_zone_close();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Request.zone_close)
  return _msg;
}

inline bool Request::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Request::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Request::PayloadCase Request::payload_case() const {
  return Request::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace sunlight


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // request_2eproto_2epb_2eh
