#pragma once
/**********************************************************
*        AUTO GENERATED FILE BY sox_code_generator        *
*                  DO NOT EDIT THIS FILE                  *
**********************************************************/

#include "sl/data/sox/sox_table_interface.h"

namespace sunlight::sox
{
    struct Monster
    {
        explicit Monster(StreamReader<std::vector<char>::const_iterator>& reader);

        int32_t index = {};
        std::string monstername = {};
        int32_t modelid = {};
        int32_t race = {};
        int32_t exp = {};
        int32_t level = {};
        int32_t str = {};
        int32_t dex = {};
        int32_t con = {};
        int32_t _int = {};
        int32_t wil = {};
        int32_t reserved1 = {};
        int32_t reserved2 = {};
        int32_t reserved3 = {};
        int32_t lifetime = {};
        float damageMotionMinHp = {};
        int32_t resist = {};
        int32_t abilityDamageB = {};
        int32_t abilityDamageC = {};
        int32_t abilityDamageD = {};
        float randomAttackFactor = {};
        int32_t death1delay = {};
        int32_t maxrarity = {};
        int32_t itemgenTimes = {};
        int32_t tresure1 = {};
        int32_t tresure2 = {};
        int32_t tresure3 = {};
        int32_t tresure4 = {};
        int32_t tresure5 = {};
        int32_t tresure6 = {};
        int32_t tresure7 = {};
        int32_t tresure8 = {};
        int32_t moneyRarityMod = {};
        int32_t moneyMinRarity = {};
        float moneyFactor = {};
        int32_t aiType = {};
        int32_t followship = {};
        int32_t generateType = {};
        int32_t rageIncRate = {};
        int32_t rageDecRate = {};
        float rageAttackFactor = {};
        int32_t ragespeed = {};
        int32_t basicspeed = {};
        int32_t sight = {};
        int32_t chase = {};
        int32_t canGoOut = {};
        int32_t domain = {};
        int32_t monsterarea = {};
        int32_t characteristic = {};
        int32_t activationStartTime = {};
        int32_t activationEndTime = {};
        int32_t childId = {};
        int32_t childSummonDelay = {};
        int32_t childNum = {};
        int32_t childSummonFrame = {};
        int32_t searchtime = {};
        int32_t move1 = {};
        int32_t move1range1 = {};
        int32_t move1range2 = {};
        int32_t move1delay1 = {};
        int32_t move1delay2 = {};
    };

    class MonsterTable final : public ISoxTable, public std::enable_shared_from_this<MonsterTable>
    {
    public:
        void LoadFromFile(const std::filesystem::path& path) override;

        auto Find(int32_t index) const -> const Monster*;
        auto Get() const -> const std::vector<Monster>&;

    private:
        std::unordered_map<int32_t, Monster*> _umap;
        std::vector<Monster> _vector;

    };
}
