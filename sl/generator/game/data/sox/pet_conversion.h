#pragma once
/**********************************************************
*        AUTO GENERATED FILE BY sox_code_generator        *
*                  DO NOT EDIT THIS FILE                  *
**********************************************************/

#include "sl/data/sox/sox_table_interface.h"

namespace sunlight::sox
{
    struct PetConversion
    {
        explicit PetConversion(StreamReader<std::vector<char>::const_iterator>& reader);

        int32_t index = {};
        int32_t maxSt = {};
        int32_t exp = {};
        int32_t stInc = {};
        float npDec = {};
        int32_t expDecNp0 = {};
        float freqIdleMotion = {};
        int32_t moveSpeed = {};
        float caressCount = {};
        int32_t caressExp = {};
        float annoyCount = {};
        int32_t annoyExpInc = {};
        int32_t annoyExpDec = {};
        int32_t abFetchScanRange = {};
        float abFetchScanFreq = {};
        int32_t abFetchNoItem = {};
        int32_t abAttackAttackPower = {};
        int32_t abAttackScanRange = {};
        float abAttackScanFreq = {};
    };

    class PetConversionTable final : public ISoxTable, public std::enable_shared_from_this<PetConversionTable>
    {
    public:
        void LoadFromFile(const std::filesystem::path& path) override;

        auto Find(int32_t index) const -> const PetConversion*;
        auto Get() const -> const std::vector<PetConversion>&;

    private:
        std::unordered_map<int32_t, PetConversion*> _umap;
        std::vector<PetConversion> _vector;

    };
}
