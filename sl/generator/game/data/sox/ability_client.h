#pragma once
/**********************************************************
*        AUTO GENERATED FILE BY sox_code_generator        *
*                  DO NOT EDIT THIS FILE                  *
**********************************************************/

#include "sl/data/sox/sox_table_interface.h"

namespace sunlight::sox
{
    struct AbilityClient
    {
        explicit AbilityClient(StreamReader<std::vector<char>::const_iterator>& reader);

        int32_t index = {};
        std::string abilityName = {};
        int32_t abilityRoutine = {};
        int32_t totalTime = {};
        int32_t _1Hand00Pid = {};
        int32_t _2Hand00Pid = {};
        int32_t spearPid = {};
        int32_t polearmPid = {};
        int32_t glovePid = {};
        int32_t bowPid = {};
        int32_t handgunPid = {};
        int32_t doublegunPid = {};
        int32_t shotgunPid = {};
        int32_t throwPid = {};
        int32_t _1Hand00StartDamageFrame = {};
        int32_t _2Hand00StartDamageFrame = {};
        int32_t spearStartDamageFrame = {};
        int32_t polearmDamageFrame = {};
        int32_t gloveStartDamageFrame = {};
        int32_t bowStartDamageFrame = {};
        int32_t handgunStartDamageFrame = {};
        int32_t doublegunStartDamageFrame = {};
        int32_t shotgunStartDamageFrame = {};
        int32_t throwStartDamageFrame = {};
        int32_t _1Hand00Timing = {};
        int32_t _2Hand00Timing = {};
        int32_t spearTiming = {};
        int32_t polearmTiming = {};
        int32_t gloveTiming = {};
        int32_t bowTiming = {};
        int32_t handgunTiming = {};
        int32_t doublegunTiming = {};
        int32_t shotgunTiming = {};
        int32_t throwTiming = {};
        int32_t _1Hand00FullTime = {};
        int32_t _2Hand00FullTime = {};
        int32_t spearFullTime = {};
        int32_t polearmFullTime = {};
        int32_t gloveFullTime = {};
        int32_t bowFullTime = {};
        int32_t handgunFullTime = {};
        int32_t doublegunFullTime = {};
        int32_t shotgunFullTime = {};
        int32_t throwFullTime = {};
        int32_t isUniqueItemAbility = {};
        int32_t uniqueItemAbilityPid = {};
        int32_t chargeFXGid = {};
        int32_t chargeFXPid = {};
        int32_t defaultShockFX = {};
        int32_t shockFXGid = {};
        int32_t shockFXPid = {};
        int32_t abilityDelay = {};
        int32_t locationTab = {};
        int32_t locationX = {};
        int32_t locationY = {};
        std::string detail = {};
        int32_t iconTextureId = {};
        int32_t iconLocation = {};
        int32_t iconTexture2Id = {};
        int32_t iconLocation2 = {};
        int32_t reserved1 = {};
        int32_t reserved2 = {};
        float dmgPenalty = {};
        int32_t category = {};
        int32_t cancelable = {};
        int32_t five = {};
        int32_t spendSP = {};
        int32_t length = {};
        int32_t keepTime = {};
        int32_t damageLength = {};
        int32_t usage = {};
        int32_t applyTarget = {};
        int32_t addWeaponRange = {};
        int32_t damageStyle = {};
        int32_t damageReserved1 = {};
        int32_t damageReserved2 = {};
        int32_t damageMotionType = {};
        int32_t sideEffect1 = {};
        int32_t sideEffect2 = {};
        int32_t statusValType1 = {};
        int32_t statusValType2 = {};
        int32_t statusProb = {};
        int32_t statusReserved11 = {};
        int32_t statusReserved12 = {};
        int32_t statusReserved21 = {};
        int32_t statusReserved22 = {};
        int32_t job = {};
        int32_t exp = {};
        float speed = {};
        int32_t requireItem = {};
        int32_t spendItem = {};
        int32_t spendBullet = {};
        int32_t increaseHit = {};
        int32_t needWeapon = {};
    };

    class AbilityClientTable final : public ISoxTable, public std::enable_shared_from_this<AbilityClientTable>
    {
    public:
        void LoadFromFile(const std::filesystem::path& path) override;

        auto Find(int32_t index) const -> const AbilityClient*;
        auto Get() const -> const std::vector<AbilityClient>&;

    private:
        std::unordered_map<int32_t, AbilityClient*> _umap;
        std::vector<AbilityClient> _vector;

    };
}
