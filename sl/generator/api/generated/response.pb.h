// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: response.proto
// Protobuf C++ Version: 5.29.0

#ifndef response_2eproto_2epb_2eh
#define response_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "dto.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_response_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_response_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_response_2eproto;
namespace sunlight {
namespace api {
class AccountCreationResponse;
struct AccountCreationResponseDefaultTypeInternal;
extern AccountCreationResponseDefaultTypeInternal _AccountCreationResponse_default_instance_;
class AccountPasswordChangeResponse;
struct AccountPasswordChangeResponseDefaultTypeInternal;
extern AccountPasswordChangeResponseDefaultTypeInternal _AccountPasswordChangeResponse_default_instance_;
class AuthenticationResponse;
struct AuthenticationResponseDefaultTypeInternal;
extern AuthenticationResponseDefaultTypeInternal _AuthenticationResponse_default_instance_;
class LogGetResponse;
struct LogGetResponseDefaultTypeInternal;
extern LogGetResponseDefaultTypeInternal _LogGetResponse_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SystemResourceInfoResponse;
struct SystemResourceInfoResponseDefaultTypeInternal;
extern SystemResourceInfoResponseDefaultTypeInternal _SystemResourceInfoResponse_default_instance_;
class UserCountResponse;
struct UserCountResponseDefaultTypeInternal;
extern UserCountResponseDefaultTypeInternal _UserCountResponse_default_instance_;
class WorldInfoResponse;
struct WorldInfoResponseDefaultTypeInternal;
extern WorldInfoResponseDefaultTypeInternal _WorldInfoResponse_default_instance_;
class ZoneCloseResponse;
struct ZoneCloseResponseDefaultTypeInternal;
extern ZoneCloseResponseDefaultTypeInternal _ZoneCloseResponse_default_instance_;
class ZoneOpenResponse;
struct ZoneOpenResponseDefaultTypeInternal;
extern ZoneOpenResponseDefaultTypeInternal _ZoneOpenResponse_default_instance_;
}  // namespace api
}  // namespace sunlight
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sunlight {
namespace api {

// ===================================================================


// -------------------------------------------------------------------

class ZoneOpenResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.ZoneOpenResponse) */ {
 public:
  inline ZoneOpenResponse() : ZoneOpenResponse(nullptr) {}
  ~ZoneOpenResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ZoneOpenResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ZoneOpenResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ZoneOpenResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ZoneOpenResponse(const ZoneOpenResponse& from) : ZoneOpenResponse(nullptr, from) {}
  inline ZoneOpenResponse(ZoneOpenResponse&& from) noexcept
      : ZoneOpenResponse(nullptr, std::move(from)) {}
  inline ZoneOpenResponse& operator=(const ZoneOpenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneOpenResponse& operator=(ZoneOpenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneOpenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneOpenResponse* internal_default_instance() {
    return reinterpret_cast<const ZoneOpenResponse*>(
        &_ZoneOpenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ZoneOpenResponse& a, ZoneOpenResponse& b) { a.Swap(&b); }
  inline void Swap(ZoneOpenResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneOpenResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneOpenResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ZoneOpenResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ZoneOpenResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ZoneOpenResponse& from) { ZoneOpenResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ZoneOpenResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.ZoneOpenResponse"; }

 protected:
  explicit ZoneOpenResponse(::google::protobuf::Arena* arena);
  ZoneOpenResponse(::google::protobuf::Arena* arena, const ZoneOpenResponse& from);
  ZoneOpenResponse(::google::protobuf::Arena* arena, ZoneOpenResponse&& from) noexcept
      : ZoneOpenResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int32 success = 1;
  void clear_success() ;
  ::int32_t success() const;
  void set_success(::int32_t value);

  private:
  ::int32_t _internal_success() const;
  void _internal_set_success(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.ZoneOpenResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ZoneOpenResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::int32_t success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class ZoneCloseResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.ZoneCloseResponse) */ {
 public:
  inline ZoneCloseResponse() : ZoneCloseResponse(nullptr) {}
  ~ZoneCloseResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ZoneCloseResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ZoneCloseResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ZoneCloseResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ZoneCloseResponse(const ZoneCloseResponse& from) : ZoneCloseResponse(nullptr, from) {}
  inline ZoneCloseResponse(ZoneCloseResponse&& from) noexcept
      : ZoneCloseResponse(nullptr, std::move(from)) {}
  inline ZoneCloseResponse& operator=(const ZoneCloseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneCloseResponse& operator=(ZoneCloseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneCloseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneCloseResponse* internal_default_instance() {
    return reinterpret_cast<const ZoneCloseResponse*>(
        &_ZoneCloseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ZoneCloseResponse& a, ZoneCloseResponse& b) { a.Swap(&b); }
  inline void Swap(ZoneCloseResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneCloseResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneCloseResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ZoneCloseResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ZoneCloseResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ZoneCloseResponse& from) { ZoneCloseResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ZoneCloseResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.ZoneCloseResponse"; }

 protected:
  explicit ZoneCloseResponse(::google::protobuf::Arena* arena);
  ZoneCloseResponse(::google::protobuf::Arena* arena, const ZoneCloseResponse& from);
  ZoneCloseResponse(::google::protobuf::Arena* arena, ZoneCloseResponse&& from) noexcept
      : ZoneCloseResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int32 success = 1;
  void clear_success() ;
  ::int32_t success() const;
  void set_success(::int32_t value);

  private:
  ::int32_t _internal_success() const;
  void _internal_set_success(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.ZoneCloseResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ZoneCloseResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::int32_t success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class UserCountResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.UserCountResponse) */ {
 public:
  inline UserCountResponse() : UserCountResponse(nullptr) {}
  ~UserCountResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserCountResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserCountResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserCountResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserCountResponse(const UserCountResponse& from) : UserCountResponse(nullptr, from) {}
  inline UserCountResponse(UserCountResponse&& from) noexcept
      : UserCountResponse(nullptr, std::move(from)) {}
  inline UserCountResponse& operator=(const UserCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserCountResponse& operator=(UserCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserCountResponse* internal_default_instance() {
    return reinterpret_cast<const UserCountResponse*>(
        &_UserCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(UserCountResponse& a, UserCountResponse& b) { a.Swap(&b); }
  inline void Swap(UserCountResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserCountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserCountResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserCountResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserCountResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserCountResponse& from) { UserCountResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserCountResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.UserCountResponse"; }

 protected:
  explicit UserCountResponse(::google::protobuf::Arena* arena);
  UserCountResponse(::google::protobuf::Arena* arena, const UserCountResponse& from);
  UserCountResponse(::google::protobuf::Arena* arena, UserCountResponse&& from) noexcept
      : UserCountResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserCountFieldNumber = 1,
  };
  // int32 user_count = 1;
  void clear_user_count() ;
  ::int32_t user_count() const;
  void set_user_count(::int32_t value);

  private:
  ::int32_t _internal_user_count() const;
  void _internal_set_user_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.UserCountResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserCountResponse& from_msg);
    ::int32_t user_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class SystemResourceInfoResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.SystemResourceInfoResponse) */ {
 public:
  inline SystemResourceInfoResponse() : SystemResourceInfoResponse(nullptr) {}
  ~SystemResourceInfoResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SystemResourceInfoResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SystemResourceInfoResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SystemResourceInfoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SystemResourceInfoResponse(const SystemResourceInfoResponse& from) : SystemResourceInfoResponse(nullptr, from) {}
  inline SystemResourceInfoResponse(SystemResourceInfoResponse&& from) noexcept
      : SystemResourceInfoResponse(nullptr, std::move(from)) {}
  inline SystemResourceInfoResponse& operator=(const SystemResourceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemResourceInfoResponse& operator=(SystemResourceInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemResourceInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemResourceInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SystemResourceInfoResponse*>(
        &_SystemResourceInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SystemResourceInfoResponse& a, SystemResourceInfoResponse& b) { a.Swap(&b); }
  inline void Swap(SystemResourceInfoResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemResourceInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemResourceInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SystemResourceInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemResourceInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SystemResourceInfoResponse& from) { SystemResourceInfoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SystemResourceInfoResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.SystemResourceInfoResponse"; }

 protected:
  explicit SystemResourceInfoResponse(::google::protobuf::Arena* arena);
  SystemResourceInfoResponse(::google::protobuf::Arena* arena, const SystemResourceInfoResponse& from);
  SystemResourceInfoResponse(::google::protobuf::Arena* arena, SystemResourceInfoResponse&& from) noexcept
      : SystemResourceInfoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFreeMemoryGbFieldNumber = 2,
    kCpuLoadPercentageFieldNumber = 1,
  };
  // double free_memory_gb = 2;
  void clear_free_memory_gb() ;
  double free_memory_gb() const;
  void set_free_memory_gb(double value);

  private:
  double _internal_free_memory_gb() const;
  void _internal_set_free_memory_gb(double value);

  public:
  // int32 cpu_load_percentage = 1;
  void clear_cpu_load_percentage() ;
  ::int32_t cpu_load_percentage() const;
  void set_cpu_load_percentage(::int32_t value);

  private:
  ::int32_t _internal_cpu_load_percentage() const;
  void _internal_set_cpu_load_percentage(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.SystemResourceInfoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SystemResourceInfoResponse& from_msg);
    double free_memory_gb_;
    ::int32_t cpu_load_percentage_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.AuthenticationResponse) */ {
 public:
  inline AuthenticationResponse() : AuthenticationResponse(nullptr) {}
  ~AuthenticationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthenticationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthenticationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthenticationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthenticationResponse(const AuthenticationResponse& from) : AuthenticationResponse(nullptr, from) {}
  inline AuthenticationResponse(AuthenticationResponse&& from) noexcept
      : AuthenticationResponse(nullptr, std::move(from)) {}
  inline AuthenticationResponse& operator=(const AuthenticationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationResponse& operator=(AuthenticationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticationResponse*>(
        &_AuthenticationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AuthenticationResponse& a, AuthenticationResponse& b) { a.Swap(&b); }
  inline void Swap(AuthenticationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthenticationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthenticationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthenticationResponse& from) { AuthenticationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthenticationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.AuthenticationResponse"; }

 protected:
  explicit AuthenticationResponse(::google::protobuf::Arena* arena);
  AuthenticationResponse(::google::protobuf::Arena* arena, const AuthenticationResponse& from);
  AuthenticationResponse(::google::protobuf::Arena* arena, AuthenticationResponse&& from) noexcept
      : AuthenticationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // int32 success = 1;
  void clear_success() ;
  ::int32_t success() const;
  void set_success(::int32_t value);

  private:
  ::int32_t _internal_success() const;
  void _internal_set_success(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.AuthenticationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthenticationResponse& from_msg);
    ::int32_t success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class AccountPasswordChangeResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.AccountPasswordChangeResponse) */ {
 public:
  inline AccountPasswordChangeResponse() : AccountPasswordChangeResponse(nullptr) {}
  ~AccountPasswordChangeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccountPasswordChangeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccountPasswordChangeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccountPasswordChangeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccountPasswordChangeResponse(const AccountPasswordChangeResponse& from) : AccountPasswordChangeResponse(nullptr, from) {}
  inline AccountPasswordChangeResponse(AccountPasswordChangeResponse&& from) noexcept
      : AccountPasswordChangeResponse(nullptr, std::move(from)) {}
  inline AccountPasswordChangeResponse& operator=(const AccountPasswordChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountPasswordChangeResponse& operator=(AccountPasswordChangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountPasswordChangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountPasswordChangeResponse* internal_default_instance() {
    return reinterpret_cast<const AccountPasswordChangeResponse*>(
        &_AccountPasswordChangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AccountPasswordChangeResponse& a, AccountPasswordChangeResponse& b) { a.Swap(&b); }
  inline void Swap(AccountPasswordChangeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountPasswordChangeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountPasswordChangeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccountPasswordChangeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccountPasswordChangeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccountPasswordChangeResponse& from) { AccountPasswordChangeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccountPasswordChangeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.AccountPasswordChangeResponse"; }

 protected:
  explicit AccountPasswordChangeResponse(::google::protobuf::Arena* arena);
  AccountPasswordChangeResponse(::google::protobuf::Arena* arena, const AccountPasswordChangeResponse& from);
  AccountPasswordChangeResponse(::google::protobuf::Arena* arena, AccountPasswordChangeResponse&& from) noexcept
      : AccountPasswordChangeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int32 success = 1;
  void clear_success() ;
  ::int32_t success() const;
  void set_success(::int32_t value);

  private:
  ::int32_t _internal_success() const;
  void _internal_set_success(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.AccountPasswordChangeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccountPasswordChangeResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::int32_t success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class AccountCreationResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.AccountCreationResponse) */ {
 public:
  inline AccountCreationResponse() : AccountCreationResponse(nullptr) {}
  ~AccountCreationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccountCreationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccountCreationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccountCreationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccountCreationResponse(const AccountCreationResponse& from) : AccountCreationResponse(nullptr, from) {}
  inline AccountCreationResponse(AccountCreationResponse&& from) noexcept
      : AccountCreationResponse(nullptr, std::move(from)) {}
  inline AccountCreationResponse& operator=(const AccountCreationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreationResponse& operator=(AccountCreationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountCreationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountCreationResponse* internal_default_instance() {
    return reinterpret_cast<const AccountCreationResponse*>(
        &_AccountCreationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AccountCreationResponse& a, AccountCreationResponse& b) { a.Swap(&b); }
  inline void Swap(AccountCreationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountCreationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccountCreationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccountCreationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccountCreationResponse& from) { AccountCreationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccountCreationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.AccountCreationResponse"; }

 protected:
  explicit AccountCreationResponse(::google::protobuf::Arena* arena);
  AccountCreationResponse(::google::protobuf::Arena* arena, const AccountCreationResponse& from);
  AccountCreationResponse(::google::protobuf::Arena* arena, AccountCreationResponse&& from) noexcept
      : AccountCreationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int32 success = 1;
  void clear_success() ;
  ::int32_t success() const;
  void set_success(::int32_t value);

  private:
  ::int32_t _internal_success() const;
  void _internal_set_success(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.AccountCreationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccountCreationResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::int32_t success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class LogGetResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.LogGetResponse) */ {
 public:
  inline LogGetResponse() : LogGetResponse(nullptr) {}
  ~LogGetResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogGetResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogGetResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogGetResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogGetResponse(const LogGetResponse& from) : LogGetResponse(nullptr, from) {}
  inline LogGetResponse(LogGetResponse&& from) noexcept
      : LogGetResponse(nullptr, std::move(from)) {}
  inline LogGetResponse& operator=(const LogGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGetResponse& operator=(LogGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogGetResponse* internal_default_instance() {
    return reinterpret_cast<const LogGetResponse*>(
        &_LogGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(LogGetResponse& a, LogGetResponse& b) { a.Swap(&b); }
  inline void Swap(LogGetResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogGetResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogGetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogGetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogGetResponse& from) { LogGetResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogGetResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.LogGetResponse"; }

 protected:
  explicit LogGetResponse(::google::protobuf::Arena* arena);
  LogGetResponse(::google::protobuf::Arena* arena, const LogGetResponse& from);
  LogGetResponse(::google::protobuf::Arena* arena, LogGetResponse&& from) noexcept
      : LogGetResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogItemListFieldNumber = 1,
  };
  // repeated .sunlight.api.LogItem log_item_list = 1;
  int log_item_list_size() const;
  private:
  int _internal_log_item_list_size() const;

  public:
  void clear_log_item_list() ;
  ::sunlight::api::LogItem* mutable_log_item_list(int index);
  ::google::protobuf::RepeatedPtrField<::sunlight::api::LogItem>* mutable_log_item_list();

  private:
  const ::google::protobuf::RepeatedPtrField<::sunlight::api::LogItem>& _internal_log_item_list() const;
  ::google::protobuf::RepeatedPtrField<::sunlight::api::LogItem>* _internal_mutable_log_item_list();
  public:
  const ::sunlight::api::LogItem& log_item_list(int index) const;
  ::sunlight::api::LogItem* add_log_item_list();
  const ::google::protobuf::RepeatedPtrField<::sunlight::api::LogItem>& log_item_list() const;
  // @@protoc_insertion_point(class_scope:sunlight.api.LogGetResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogGetResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::sunlight::api::LogItem > log_item_list_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class WorldInfoResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.WorldInfoResponse) */ {
 public:
  inline WorldInfoResponse() : WorldInfoResponse(nullptr) {}
  ~WorldInfoResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WorldInfoResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WorldInfoResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorldInfoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorldInfoResponse(const WorldInfoResponse& from) : WorldInfoResponse(nullptr, from) {}
  inline WorldInfoResponse(WorldInfoResponse&& from) noexcept
      : WorldInfoResponse(nullptr, std::move(from)) {}
  inline WorldInfoResponse& operator=(const WorldInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldInfoResponse& operator=(WorldInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldInfoResponse* internal_default_instance() {
    return reinterpret_cast<const WorldInfoResponse*>(
        &_WorldInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(WorldInfoResponse& a, WorldInfoResponse& b) { a.Swap(&b); }
  inline void Swap(WorldInfoResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WorldInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorldInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorldInfoResponse& from) { WorldInfoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WorldInfoResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.WorldInfoResponse"; }

 protected:
  explicit WorldInfoResponse(::google::protobuf::Arena* arena);
  WorldInfoResponse(::google::protobuf::Arena* arena, const WorldInfoResponse& from);
  WorldInfoResponse(::google::protobuf::Arena* arena, WorldInfoResponse&& from) noexcept
      : WorldInfoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWorldInfoListFieldNumber = 1,
  };
  // repeated .sunlight.api.WorldInfo world_info_list = 1;
  int world_info_list_size() const;
  private:
  int _internal_world_info_list_size() const;

  public:
  void clear_world_info_list() ;
  ::sunlight::api::WorldInfo* mutable_world_info_list(int index);
  ::google::protobuf::RepeatedPtrField<::sunlight::api::WorldInfo>* mutable_world_info_list();

  private:
  const ::google::protobuf::RepeatedPtrField<::sunlight::api::WorldInfo>& _internal_world_info_list() const;
  ::google::protobuf::RepeatedPtrField<::sunlight::api::WorldInfo>* _internal_mutable_world_info_list();
  public:
  const ::sunlight::api::WorldInfo& world_info_list(int index) const;
  ::sunlight::api::WorldInfo* add_world_info_list();
  const ::google::protobuf::RepeatedPtrField<::sunlight::api::WorldInfo>& world_info_list() const;
  // @@protoc_insertion_point(class_scope:sunlight.api.WorldInfoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorldInfoResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::sunlight::api::WorldInfo > world_info_list_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};
// -------------------------------------------------------------------

class Response final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Response(
      ::google::protobuf::internal::ConstantInitialized);

  inline Response(const Response& from) : Response(nullptr, from) {}
  inline Response(Response&& from) noexcept
      : Response(nullptr, std::move(from)) {}
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAuthentication = 100,
    kAccountCreation = 101,
    kAccountPasswordChange = 102,
    kUserCount = 103,
    kSystemResourceInfo = 104,
    kWorldInfo = 105,
    kLogGet = 106,
    kZoneOpen = 107,
    kZoneClose = 108,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
        &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Response& a, Response& b) { a.Swap(&b); }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Response& from) { Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.Response"; }

 protected:
  explicit Response(::google::protobuf::Arena* arena);
  Response(::google::protobuf::Arena* arena, const Response& from);
  Response(::google::protobuf::Arena* arena, Response&& from) noexcept
      : Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
    kAuthenticationFieldNumber = 100,
    kAccountCreationFieldNumber = 101,
    kAccountPasswordChangeFieldNumber = 102,
    kUserCountFieldNumber = 103,
    kSystemResourceInfoFieldNumber = 104,
    kWorldInfoFieldNumber = 105,
    kLogGetFieldNumber = 106,
    kZoneOpenFieldNumber = 107,
    kZoneCloseFieldNumber = 108,
  };
  // int32 request_id = 1;
  void clear_request_id() ;
  ::int32_t request_id() const;
  void set_request_id(::int32_t value);

  private:
  ::int32_t _internal_request_id() const;
  void _internal_set_request_id(::int32_t value);

  public:
  // .sunlight.api.AuthenticationResponse authentication = 100;
  bool has_authentication() const;
  private:
  bool _internal_has_authentication() const;

  public:
  void clear_authentication() ;
  const ::sunlight::api::AuthenticationResponse& authentication() const;
  PROTOBUF_NODISCARD ::sunlight::api::AuthenticationResponse* release_authentication();
  ::sunlight::api::AuthenticationResponse* mutable_authentication();
  void set_allocated_authentication(::sunlight::api::AuthenticationResponse* value);
  void unsafe_arena_set_allocated_authentication(::sunlight::api::AuthenticationResponse* value);
  ::sunlight::api::AuthenticationResponse* unsafe_arena_release_authentication();

  private:
  const ::sunlight::api::AuthenticationResponse& _internal_authentication() const;
  ::sunlight::api::AuthenticationResponse* _internal_mutable_authentication();

  public:
  // .sunlight.api.AccountCreationResponse account_creation = 101;
  bool has_account_creation() const;
  private:
  bool _internal_has_account_creation() const;

  public:
  void clear_account_creation() ;
  const ::sunlight::api::AccountCreationResponse& account_creation() const;
  PROTOBUF_NODISCARD ::sunlight::api::AccountCreationResponse* release_account_creation();
  ::sunlight::api::AccountCreationResponse* mutable_account_creation();
  void set_allocated_account_creation(::sunlight::api::AccountCreationResponse* value);
  void unsafe_arena_set_allocated_account_creation(::sunlight::api::AccountCreationResponse* value);
  ::sunlight::api::AccountCreationResponse* unsafe_arena_release_account_creation();

  private:
  const ::sunlight::api::AccountCreationResponse& _internal_account_creation() const;
  ::sunlight::api::AccountCreationResponse* _internal_mutable_account_creation();

  public:
  // .sunlight.api.AccountPasswordChangeResponse account_password_change = 102;
  bool has_account_password_change() const;
  private:
  bool _internal_has_account_password_change() const;

  public:
  void clear_account_password_change() ;
  const ::sunlight::api::AccountPasswordChangeResponse& account_password_change() const;
  PROTOBUF_NODISCARD ::sunlight::api::AccountPasswordChangeResponse* release_account_password_change();
  ::sunlight::api::AccountPasswordChangeResponse* mutable_account_password_change();
  void set_allocated_account_password_change(::sunlight::api::AccountPasswordChangeResponse* value);
  void unsafe_arena_set_allocated_account_password_change(::sunlight::api::AccountPasswordChangeResponse* value);
  ::sunlight::api::AccountPasswordChangeResponse* unsafe_arena_release_account_password_change();

  private:
  const ::sunlight::api::AccountPasswordChangeResponse& _internal_account_password_change() const;
  ::sunlight::api::AccountPasswordChangeResponse* _internal_mutable_account_password_change();

  public:
  // .sunlight.api.UserCountResponse user_count = 103;
  bool has_user_count() const;
  private:
  bool _internal_has_user_count() const;

  public:
  void clear_user_count() ;
  const ::sunlight::api::UserCountResponse& user_count() const;
  PROTOBUF_NODISCARD ::sunlight::api::UserCountResponse* release_user_count();
  ::sunlight::api::UserCountResponse* mutable_user_count();
  void set_allocated_user_count(::sunlight::api::UserCountResponse* value);
  void unsafe_arena_set_allocated_user_count(::sunlight::api::UserCountResponse* value);
  ::sunlight::api::UserCountResponse* unsafe_arena_release_user_count();

  private:
  const ::sunlight::api::UserCountResponse& _internal_user_count() const;
  ::sunlight::api::UserCountResponse* _internal_mutable_user_count();

  public:
  // .sunlight.api.SystemResourceInfoResponse system_resource_info = 104;
  bool has_system_resource_info() const;
  private:
  bool _internal_has_system_resource_info() const;

  public:
  void clear_system_resource_info() ;
  const ::sunlight::api::SystemResourceInfoResponse& system_resource_info() const;
  PROTOBUF_NODISCARD ::sunlight::api::SystemResourceInfoResponse* release_system_resource_info();
  ::sunlight::api::SystemResourceInfoResponse* mutable_system_resource_info();
  void set_allocated_system_resource_info(::sunlight::api::SystemResourceInfoResponse* value);
  void unsafe_arena_set_allocated_system_resource_info(::sunlight::api::SystemResourceInfoResponse* value);
  ::sunlight::api::SystemResourceInfoResponse* unsafe_arena_release_system_resource_info();

  private:
  const ::sunlight::api::SystemResourceInfoResponse& _internal_system_resource_info() const;
  ::sunlight::api::SystemResourceInfoResponse* _internal_mutable_system_resource_info();

  public:
  // .sunlight.api.WorldInfoResponse world_info = 105;
  bool has_world_info() const;
  private:
  bool _internal_has_world_info() const;

  public:
  void clear_world_info() ;
  const ::sunlight::api::WorldInfoResponse& world_info() const;
  PROTOBUF_NODISCARD ::sunlight::api::WorldInfoResponse* release_world_info();
  ::sunlight::api::WorldInfoResponse* mutable_world_info();
  void set_allocated_world_info(::sunlight::api::WorldInfoResponse* value);
  void unsafe_arena_set_allocated_world_info(::sunlight::api::WorldInfoResponse* value);
  ::sunlight::api::WorldInfoResponse* unsafe_arena_release_world_info();

  private:
  const ::sunlight::api::WorldInfoResponse& _internal_world_info() const;
  ::sunlight::api::WorldInfoResponse* _internal_mutable_world_info();

  public:
  // .sunlight.api.LogGetResponse log_get = 106;
  bool has_log_get() const;
  private:
  bool _internal_has_log_get() const;

  public:
  void clear_log_get() ;
  const ::sunlight::api::LogGetResponse& log_get() const;
  PROTOBUF_NODISCARD ::sunlight::api::LogGetResponse* release_log_get();
  ::sunlight::api::LogGetResponse* mutable_log_get();
  void set_allocated_log_get(::sunlight::api::LogGetResponse* value);
  void unsafe_arena_set_allocated_log_get(::sunlight::api::LogGetResponse* value);
  ::sunlight::api::LogGetResponse* unsafe_arena_release_log_get();

  private:
  const ::sunlight::api::LogGetResponse& _internal_log_get() const;
  ::sunlight::api::LogGetResponse* _internal_mutable_log_get();

  public:
  // .sunlight.api.ZoneOpenResponse zone_open = 107;
  bool has_zone_open() const;
  private:
  bool _internal_has_zone_open() const;

  public:
  void clear_zone_open() ;
  const ::sunlight::api::ZoneOpenResponse& zone_open() const;
  PROTOBUF_NODISCARD ::sunlight::api::ZoneOpenResponse* release_zone_open();
  ::sunlight::api::ZoneOpenResponse* mutable_zone_open();
  void set_allocated_zone_open(::sunlight::api::ZoneOpenResponse* value);
  void unsafe_arena_set_allocated_zone_open(::sunlight::api::ZoneOpenResponse* value);
  ::sunlight::api::ZoneOpenResponse* unsafe_arena_release_zone_open();

  private:
  const ::sunlight::api::ZoneOpenResponse& _internal_zone_open() const;
  ::sunlight::api::ZoneOpenResponse* _internal_mutable_zone_open();

  public:
  // .sunlight.api.ZoneCloseResponse zone_close = 108;
  bool has_zone_close() const;
  private:
  bool _internal_has_zone_close() const;

  public:
  void clear_zone_close() ;
  const ::sunlight::api::ZoneCloseResponse& zone_close() const;
  PROTOBUF_NODISCARD ::sunlight::api::ZoneCloseResponse* release_zone_close();
  ::sunlight::api::ZoneCloseResponse* mutable_zone_close();
  void set_allocated_zone_close(::sunlight::api::ZoneCloseResponse* value);
  void unsafe_arena_set_allocated_zone_close(::sunlight::api::ZoneCloseResponse* value);
  ::sunlight::api::ZoneCloseResponse* unsafe_arena_release_zone_close();

  private:
  const ::sunlight::api::ZoneCloseResponse& _internal_zone_close() const;
  ::sunlight::api::ZoneCloseResponse* _internal_mutable_zone_close();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:sunlight.api.Response)
 private:
  class _Internal;
  void set_has_authentication();
  void set_has_account_creation();
  void set_has_account_password_change();
  void set_has_user_count();
  void set_has_system_resource_info();
  void set_has_world_info();
  void set_has_log_get();
  void set_has_zone_open();
  void set_has_zone_close();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 10, 9,
      0, 7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Response& from_msg);
    ::int32_t request_id_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::sunlight::api::AuthenticationResponse* authentication_;
      ::sunlight::api::AccountCreationResponse* account_creation_;
      ::sunlight::api::AccountPasswordChangeResponse* account_password_change_;
      ::sunlight::api::UserCountResponse* user_count_;
      ::sunlight::api::SystemResourceInfoResponse* system_resource_info_;
      ::sunlight::api::WorldInfoResponse* world_info_;
      ::sunlight::api::LogGetResponse* log_get_;
      ::sunlight::api::ZoneOpenResponse* zone_open_;
      ::sunlight::api::ZoneCloseResponse* zone_close_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_response_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AuthenticationResponse

// int32 success = 1;
inline void AuthenticationResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = 0;
}
inline ::int32_t AuthenticationResponse::success() const {
  // @@protoc_insertion_point(field_get:sunlight.api.AuthenticationResponse.success)
  return _internal_success();
}
inline void AuthenticationResponse::set_success(::int32_t value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sunlight.api.AuthenticationResponse.success)
}
inline ::int32_t AuthenticationResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AuthenticationResponse::_internal_set_success(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// AccountCreationResponse

// int32 success = 1;
inline void AccountCreationResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = 0;
}
inline ::int32_t AccountCreationResponse::success() const {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountCreationResponse.success)
  return _internal_success();
}
inline void AccountCreationResponse::set_success(::int32_t value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sunlight.api.AccountCreationResponse.success)
}
inline ::int32_t AccountCreationResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AccountCreationResponse::_internal_set_success(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void AccountCreationResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& AccountCreationResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountCreationResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountCreationResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.AccountCreationResponse.error_message)
}
inline std::string* AccountCreationResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sunlight.api.AccountCreationResponse.error_message)
  return _s;
}
inline const std::string& AccountCreationResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void AccountCreationResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* AccountCreationResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* AccountCreationResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.AccountCreationResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void AccountCreationResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.AccountCreationResponse.error_message)
}

// -------------------------------------------------------------------

// AccountPasswordChangeResponse

// int32 success = 1;
inline void AccountPasswordChangeResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = 0;
}
inline ::int32_t AccountPasswordChangeResponse::success() const {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountPasswordChangeResponse.success)
  return _internal_success();
}
inline void AccountPasswordChangeResponse::set_success(::int32_t value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sunlight.api.AccountPasswordChangeResponse.success)
}
inline ::int32_t AccountPasswordChangeResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AccountPasswordChangeResponse::_internal_set_success(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void AccountPasswordChangeResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& AccountPasswordChangeResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.AccountPasswordChangeResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPasswordChangeResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.AccountPasswordChangeResponse.error_message)
}
inline std::string* AccountPasswordChangeResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sunlight.api.AccountPasswordChangeResponse.error_message)
  return _s;
}
inline const std::string& AccountPasswordChangeResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void AccountPasswordChangeResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* AccountPasswordChangeResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* AccountPasswordChangeResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.AccountPasswordChangeResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void AccountPasswordChangeResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.AccountPasswordChangeResponse.error_message)
}

// -------------------------------------------------------------------

// UserCountResponse

// int32 user_count = 1;
inline void UserCountResponse::clear_user_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_count_ = 0;
}
inline ::int32_t UserCountResponse::user_count() const {
  // @@protoc_insertion_point(field_get:sunlight.api.UserCountResponse.user_count)
  return _internal_user_count();
}
inline void UserCountResponse::set_user_count(::int32_t value) {
  _internal_set_user_count(value);
  // @@protoc_insertion_point(field_set:sunlight.api.UserCountResponse.user_count)
}
inline ::int32_t UserCountResponse::_internal_user_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_count_;
}
inline void UserCountResponse::_internal_set_user_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_count_ = value;
}

// -------------------------------------------------------------------

// SystemResourceInfoResponse

// int32 cpu_load_percentage = 1;
inline void SystemResourceInfoResponse::clear_cpu_load_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_load_percentage_ = 0;
}
inline ::int32_t SystemResourceInfoResponse::cpu_load_percentage() const {
  // @@protoc_insertion_point(field_get:sunlight.api.SystemResourceInfoResponse.cpu_load_percentage)
  return _internal_cpu_load_percentage();
}
inline void SystemResourceInfoResponse::set_cpu_load_percentage(::int32_t value) {
  _internal_set_cpu_load_percentage(value);
  // @@protoc_insertion_point(field_set:sunlight.api.SystemResourceInfoResponse.cpu_load_percentage)
}
inline ::int32_t SystemResourceInfoResponse::_internal_cpu_load_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cpu_load_percentage_;
}
inline void SystemResourceInfoResponse::_internal_set_cpu_load_percentage(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_load_percentage_ = value;
}

// double free_memory_gb = 2;
inline void SystemResourceInfoResponse::clear_free_memory_gb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.free_memory_gb_ = 0;
}
inline double SystemResourceInfoResponse::free_memory_gb() const {
  // @@protoc_insertion_point(field_get:sunlight.api.SystemResourceInfoResponse.free_memory_gb)
  return _internal_free_memory_gb();
}
inline void SystemResourceInfoResponse::set_free_memory_gb(double value) {
  _internal_set_free_memory_gb(value);
  // @@protoc_insertion_point(field_set:sunlight.api.SystemResourceInfoResponse.free_memory_gb)
}
inline double SystemResourceInfoResponse::_internal_free_memory_gb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.free_memory_gb_;
}
inline void SystemResourceInfoResponse::_internal_set_free_memory_gb(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.free_memory_gb_ = value;
}

// -------------------------------------------------------------------

// WorldInfoResponse

// repeated .sunlight.api.WorldInfo world_info_list = 1;
inline int WorldInfoResponse::_internal_world_info_list_size() const {
  return _internal_world_info_list().size();
}
inline int WorldInfoResponse::world_info_list_size() const {
  return _internal_world_info_list_size();
}
inline ::sunlight::api::WorldInfo* WorldInfoResponse::mutable_world_info_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sunlight.api.WorldInfoResponse.world_info_list)
  return _internal_mutable_world_info_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sunlight::api::WorldInfo>* WorldInfoResponse::mutable_world_info_list()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sunlight.api.WorldInfoResponse.world_info_list)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_world_info_list();
}
inline const ::sunlight::api::WorldInfo& WorldInfoResponse::world_info_list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.WorldInfoResponse.world_info_list)
  return _internal_world_info_list().Get(index);
}
inline ::sunlight::api::WorldInfo* WorldInfoResponse::add_world_info_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sunlight::api::WorldInfo* _add = _internal_mutable_world_info_list()->Add();
  // @@protoc_insertion_point(field_add:sunlight.api.WorldInfoResponse.world_info_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sunlight::api::WorldInfo>& WorldInfoResponse::world_info_list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sunlight.api.WorldInfoResponse.world_info_list)
  return _internal_world_info_list();
}
inline const ::google::protobuf::RepeatedPtrField<::sunlight::api::WorldInfo>&
WorldInfoResponse::_internal_world_info_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.world_info_list_;
}
inline ::google::protobuf::RepeatedPtrField<::sunlight::api::WorldInfo>*
WorldInfoResponse::_internal_mutable_world_info_list() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.world_info_list_;
}

// -------------------------------------------------------------------

// LogGetResponse

// repeated .sunlight.api.LogItem log_item_list = 1;
inline int LogGetResponse::_internal_log_item_list_size() const {
  return _internal_log_item_list().size();
}
inline int LogGetResponse::log_item_list_size() const {
  return _internal_log_item_list_size();
}
inline ::sunlight::api::LogItem* LogGetResponse::mutable_log_item_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sunlight.api.LogGetResponse.log_item_list)
  return _internal_mutable_log_item_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sunlight::api::LogItem>* LogGetResponse::mutable_log_item_list()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sunlight.api.LogGetResponse.log_item_list)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_log_item_list();
}
inline const ::sunlight::api::LogItem& LogGetResponse::log_item_list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.LogGetResponse.log_item_list)
  return _internal_log_item_list().Get(index);
}
inline ::sunlight::api::LogItem* LogGetResponse::add_log_item_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sunlight::api::LogItem* _add = _internal_mutable_log_item_list()->Add();
  // @@protoc_insertion_point(field_add:sunlight.api.LogGetResponse.log_item_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sunlight::api::LogItem>& LogGetResponse::log_item_list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sunlight.api.LogGetResponse.log_item_list)
  return _internal_log_item_list();
}
inline const ::google::protobuf::RepeatedPtrField<::sunlight::api::LogItem>&
LogGetResponse::_internal_log_item_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_item_list_;
}
inline ::google::protobuf::RepeatedPtrField<::sunlight::api::LogItem>*
LogGetResponse::_internal_mutable_log_item_list() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.log_item_list_;
}

// -------------------------------------------------------------------

// ZoneOpenResponse

// int32 success = 1;
inline void ZoneOpenResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = 0;
}
inline ::int32_t ZoneOpenResponse::success() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneOpenResponse.success)
  return _internal_success();
}
inline void ZoneOpenResponse::set_success(::int32_t value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneOpenResponse.success)
}
inline ::int32_t ZoneOpenResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ZoneOpenResponse::_internal_set_success(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void ZoneOpenResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ZoneOpenResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneOpenResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZoneOpenResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneOpenResponse.error_message)
}
inline std::string* ZoneOpenResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sunlight.api.ZoneOpenResponse.error_message)
  return _s;
}
inline const std::string& ZoneOpenResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void ZoneOpenResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* ZoneOpenResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* ZoneOpenResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.ZoneOpenResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void ZoneOpenResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.ZoneOpenResponse.error_message)
}

// -------------------------------------------------------------------

// ZoneCloseResponse

// int32 success = 1;
inline void ZoneCloseResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = 0;
}
inline ::int32_t ZoneCloseResponse::success() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneCloseResponse.success)
  return _internal_success();
}
inline void ZoneCloseResponse::set_success(::int32_t value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneCloseResponse.success)
}
inline ::int32_t ZoneCloseResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ZoneCloseResponse::_internal_set_success(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void ZoneCloseResponse::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ZoneCloseResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneCloseResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZoneCloseResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneCloseResponse.error_message)
}
inline std::string* ZoneCloseResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sunlight.api.ZoneCloseResponse.error_message)
  return _s;
}
inline const std::string& ZoneCloseResponse::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void ZoneCloseResponse::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* ZoneCloseResponse::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* ZoneCloseResponse::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.ZoneCloseResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void ZoneCloseResponse::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.ZoneCloseResponse.error_message)
}

// -------------------------------------------------------------------

// Response

// int32 request_id = 1;
inline void Response::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = 0;
}
inline ::int32_t Response::request_id() const {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.request_id)
  return _internal_request_id();
}
inline void Response::set_request_id(::int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:sunlight.api.Response.request_id)
}
inline ::int32_t Response::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_;
}
inline void Response::_internal_set_request_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_ = value;
}

// .sunlight.api.AuthenticationResponse authentication = 100;
inline bool Response::has_authentication() const {
  return payload_case() == kAuthentication;
}
inline bool Response::_internal_has_authentication() const {
  return payload_case() == kAuthentication;
}
inline void Response::set_has_authentication() {
  _impl_._oneof_case_[0] = kAuthentication;
}
inline void Response::clear_authentication() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAuthentication) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.authentication_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.authentication_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::AuthenticationResponse* Response::release_authentication() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.authentication)
  if (payload_case() == kAuthentication) {
    clear_has_payload();
    auto* temp = _impl_.payload_.authentication_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.authentication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::AuthenticationResponse& Response::_internal_authentication() const {
  return payload_case() == kAuthentication ? *_impl_.payload_.authentication_ : reinterpret_cast<::sunlight::api::AuthenticationResponse&>(::sunlight::api::_AuthenticationResponse_default_instance_);
}
inline const ::sunlight::api::AuthenticationResponse& Response::authentication() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.authentication)
  return _internal_authentication();
}
inline ::sunlight::api::AuthenticationResponse* Response::unsafe_arena_release_authentication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.authentication)
  if (payload_case() == kAuthentication) {
    clear_has_payload();
    auto* temp = _impl_.payload_.authentication_;
    _impl_.payload_.authentication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_authentication(::sunlight::api::AuthenticationResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_authentication();
    _impl_.payload_.authentication_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.authentication)
}
inline ::sunlight::api::AuthenticationResponse* Response::_internal_mutable_authentication() {
  if (payload_case() != kAuthentication) {
    clear_payload();
    set_has_authentication();
    _impl_.payload_.authentication_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::AuthenticationResponse>(GetArena());
  }
  return _impl_.payload_.authentication_;
}
inline ::sunlight::api::AuthenticationResponse* Response::mutable_authentication() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::AuthenticationResponse* _msg = _internal_mutable_authentication();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.authentication)
  return _msg;
}

// .sunlight.api.AccountCreationResponse account_creation = 101;
inline bool Response::has_account_creation() const {
  return payload_case() == kAccountCreation;
}
inline bool Response::_internal_has_account_creation() const {
  return payload_case() == kAccountCreation;
}
inline void Response::set_has_account_creation() {
  _impl_._oneof_case_[0] = kAccountCreation;
}
inline void Response::clear_account_creation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAccountCreation) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.account_creation_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.account_creation_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::AccountCreationResponse* Response::release_account_creation() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.account_creation)
  if (payload_case() == kAccountCreation) {
    clear_has_payload();
    auto* temp = _impl_.payload_.account_creation_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.account_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::AccountCreationResponse& Response::_internal_account_creation() const {
  return payload_case() == kAccountCreation ? *_impl_.payload_.account_creation_ : reinterpret_cast<::sunlight::api::AccountCreationResponse&>(::sunlight::api::_AccountCreationResponse_default_instance_);
}
inline const ::sunlight::api::AccountCreationResponse& Response::account_creation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.account_creation)
  return _internal_account_creation();
}
inline ::sunlight::api::AccountCreationResponse* Response::unsafe_arena_release_account_creation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.account_creation)
  if (payload_case() == kAccountCreation) {
    clear_has_payload();
    auto* temp = _impl_.payload_.account_creation_;
    _impl_.payload_.account_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_account_creation(::sunlight::api::AccountCreationResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_account_creation();
    _impl_.payload_.account_creation_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.account_creation)
}
inline ::sunlight::api::AccountCreationResponse* Response::_internal_mutable_account_creation() {
  if (payload_case() != kAccountCreation) {
    clear_payload();
    set_has_account_creation();
    _impl_.payload_.account_creation_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::AccountCreationResponse>(GetArena());
  }
  return _impl_.payload_.account_creation_;
}
inline ::sunlight::api::AccountCreationResponse* Response::mutable_account_creation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::AccountCreationResponse* _msg = _internal_mutable_account_creation();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.account_creation)
  return _msg;
}

// .sunlight.api.AccountPasswordChangeResponse account_password_change = 102;
inline bool Response::has_account_password_change() const {
  return payload_case() == kAccountPasswordChange;
}
inline bool Response::_internal_has_account_password_change() const {
  return payload_case() == kAccountPasswordChange;
}
inline void Response::set_has_account_password_change() {
  _impl_._oneof_case_[0] = kAccountPasswordChange;
}
inline void Response::clear_account_password_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAccountPasswordChange) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.account_password_change_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.account_password_change_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::AccountPasswordChangeResponse* Response::release_account_password_change() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.account_password_change)
  if (payload_case() == kAccountPasswordChange) {
    clear_has_payload();
    auto* temp = _impl_.payload_.account_password_change_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.account_password_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::AccountPasswordChangeResponse& Response::_internal_account_password_change() const {
  return payload_case() == kAccountPasswordChange ? *_impl_.payload_.account_password_change_ : reinterpret_cast<::sunlight::api::AccountPasswordChangeResponse&>(::sunlight::api::_AccountPasswordChangeResponse_default_instance_);
}
inline const ::sunlight::api::AccountPasswordChangeResponse& Response::account_password_change() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.account_password_change)
  return _internal_account_password_change();
}
inline ::sunlight::api::AccountPasswordChangeResponse* Response::unsafe_arena_release_account_password_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.account_password_change)
  if (payload_case() == kAccountPasswordChange) {
    clear_has_payload();
    auto* temp = _impl_.payload_.account_password_change_;
    _impl_.payload_.account_password_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_account_password_change(::sunlight::api::AccountPasswordChangeResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_account_password_change();
    _impl_.payload_.account_password_change_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.account_password_change)
}
inline ::sunlight::api::AccountPasswordChangeResponse* Response::_internal_mutable_account_password_change() {
  if (payload_case() != kAccountPasswordChange) {
    clear_payload();
    set_has_account_password_change();
    _impl_.payload_.account_password_change_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::AccountPasswordChangeResponse>(GetArena());
  }
  return _impl_.payload_.account_password_change_;
}
inline ::sunlight::api::AccountPasswordChangeResponse* Response::mutable_account_password_change() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::AccountPasswordChangeResponse* _msg = _internal_mutable_account_password_change();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.account_password_change)
  return _msg;
}

// .sunlight.api.UserCountResponse user_count = 103;
inline bool Response::has_user_count() const {
  return payload_case() == kUserCount;
}
inline bool Response::_internal_has_user_count() const {
  return payload_case() == kUserCount;
}
inline void Response::set_has_user_count() {
  _impl_._oneof_case_[0] = kUserCount;
}
inline void Response::clear_user_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kUserCount) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.user_count_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.user_count_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::UserCountResponse* Response::release_user_count() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.user_count)
  if (payload_case() == kUserCount) {
    clear_has_payload();
    auto* temp = _impl_.payload_.user_count_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.user_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::UserCountResponse& Response::_internal_user_count() const {
  return payload_case() == kUserCount ? *_impl_.payload_.user_count_ : reinterpret_cast<::sunlight::api::UserCountResponse&>(::sunlight::api::_UserCountResponse_default_instance_);
}
inline const ::sunlight::api::UserCountResponse& Response::user_count() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.user_count)
  return _internal_user_count();
}
inline ::sunlight::api::UserCountResponse* Response::unsafe_arena_release_user_count() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.user_count)
  if (payload_case() == kUserCount) {
    clear_has_payload();
    auto* temp = _impl_.payload_.user_count_;
    _impl_.payload_.user_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_user_count(::sunlight::api::UserCountResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_user_count();
    _impl_.payload_.user_count_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.user_count)
}
inline ::sunlight::api::UserCountResponse* Response::_internal_mutable_user_count() {
  if (payload_case() != kUserCount) {
    clear_payload();
    set_has_user_count();
    _impl_.payload_.user_count_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::UserCountResponse>(GetArena());
  }
  return _impl_.payload_.user_count_;
}
inline ::sunlight::api::UserCountResponse* Response::mutable_user_count() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::UserCountResponse* _msg = _internal_mutable_user_count();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.user_count)
  return _msg;
}

// .sunlight.api.SystemResourceInfoResponse system_resource_info = 104;
inline bool Response::has_system_resource_info() const {
  return payload_case() == kSystemResourceInfo;
}
inline bool Response::_internal_has_system_resource_info() const {
  return payload_case() == kSystemResourceInfo;
}
inline void Response::set_has_system_resource_info() {
  _impl_._oneof_case_[0] = kSystemResourceInfo;
}
inline void Response::clear_system_resource_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSystemResourceInfo) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.system_resource_info_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.system_resource_info_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::SystemResourceInfoResponse* Response::release_system_resource_info() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.system_resource_info)
  if (payload_case() == kSystemResourceInfo) {
    clear_has_payload();
    auto* temp = _impl_.payload_.system_resource_info_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.system_resource_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::SystemResourceInfoResponse& Response::_internal_system_resource_info() const {
  return payload_case() == kSystemResourceInfo ? *_impl_.payload_.system_resource_info_ : reinterpret_cast<::sunlight::api::SystemResourceInfoResponse&>(::sunlight::api::_SystemResourceInfoResponse_default_instance_);
}
inline const ::sunlight::api::SystemResourceInfoResponse& Response::system_resource_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.system_resource_info)
  return _internal_system_resource_info();
}
inline ::sunlight::api::SystemResourceInfoResponse* Response::unsafe_arena_release_system_resource_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.system_resource_info)
  if (payload_case() == kSystemResourceInfo) {
    clear_has_payload();
    auto* temp = _impl_.payload_.system_resource_info_;
    _impl_.payload_.system_resource_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_system_resource_info(::sunlight::api::SystemResourceInfoResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_system_resource_info();
    _impl_.payload_.system_resource_info_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.system_resource_info)
}
inline ::sunlight::api::SystemResourceInfoResponse* Response::_internal_mutable_system_resource_info() {
  if (payload_case() != kSystemResourceInfo) {
    clear_payload();
    set_has_system_resource_info();
    _impl_.payload_.system_resource_info_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::SystemResourceInfoResponse>(GetArena());
  }
  return _impl_.payload_.system_resource_info_;
}
inline ::sunlight::api::SystemResourceInfoResponse* Response::mutable_system_resource_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::SystemResourceInfoResponse* _msg = _internal_mutable_system_resource_info();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.system_resource_info)
  return _msg;
}

// .sunlight.api.WorldInfoResponse world_info = 105;
inline bool Response::has_world_info() const {
  return payload_case() == kWorldInfo;
}
inline bool Response::_internal_has_world_info() const {
  return payload_case() == kWorldInfo;
}
inline void Response::set_has_world_info() {
  _impl_._oneof_case_[0] = kWorldInfo;
}
inline void Response::clear_world_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kWorldInfo) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.world_info_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.world_info_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::WorldInfoResponse* Response::release_world_info() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.world_info)
  if (payload_case() == kWorldInfo) {
    clear_has_payload();
    auto* temp = _impl_.payload_.world_info_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.world_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::WorldInfoResponse& Response::_internal_world_info() const {
  return payload_case() == kWorldInfo ? *_impl_.payload_.world_info_ : reinterpret_cast<::sunlight::api::WorldInfoResponse&>(::sunlight::api::_WorldInfoResponse_default_instance_);
}
inline const ::sunlight::api::WorldInfoResponse& Response::world_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.world_info)
  return _internal_world_info();
}
inline ::sunlight::api::WorldInfoResponse* Response::unsafe_arena_release_world_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.world_info)
  if (payload_case() == kWorldInfo) {
    clear_has_payload();
    auto* temp = _impl_.payload_.world_info_;
    _impl_.payload_.world_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_world_info(::sunlight::api::WorldInfoResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_world_info();
    _impl_.payload_.world_info_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.world_info)
}
inline ::sunlight::api::WorldInfoResponse* Response::_internal_mutable_world_info() {
  if (payload_case() != kWorldInfo) {
    clear_payload();
    set_has_world_info();
    _impl_.payload_.world_info_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::WorldInfoResponse>(GetArena());
  }
  return _impl_.payload_.world_info_;
}
inline ::sunlight::api::WorldInfoResponse* Response::mutable_world_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::WorldInfoResponse* _msg = _internal_mutable_world_info();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.world_info)
  return _msg;
}

// .sunlight.api.LogGetResponse log_get = 106;
inline bool Response::has_log_get() const {
  return payload_case() == kLogGet;
}
inline bool Response::_internal_has_log_get() const {
  return payload_case() == kLogGet;
}
inline void Response::set_has_log_get() {
  _impl_._oneof_case_[0] = kLogGet;
}
inline void Response::clear_log_get() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kLogGet) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.log_get_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.log_get_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::LogGetResponse* Response::release_log_get() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.log_get)
  if (payload_case() == kLogGet) {
    clear_has_payload();
    auto* temp = _impl_.payload_.log_get_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.log_get_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::LogGetResponse& Response::_internal_log_get() const {
  return payload_case() == kLogGet ? *_impl_.payload_.log_get_ : reinterpret_cast<::sunlight::api::LogGetResponse&>(::sunlight::api::_LogGetResponse_default_instance_);
}
inline const ::sunlight::api::LogGetResponse& Response::log_get() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.log_get)
  return _internal_log_get();
}
inline ::sunlight::api::LogGetResponse* Response::unsafe_arena_release_log_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.log_get)
  if (payload_case() == kLogGet) {
    clear_has_payload();
    auto* temp = _impl_.payload_.log_get_;
    _impl_.payload_.log_get_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_log_get(::sunlight::api::LogGetResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_log_get();
    _impl_.payload_.log_get_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.log_get)
}
inline ::sunlight::api::LogGetResponse* Response::_internal_mutable_log_get() {
  if (payload_case() != kLogGet) {
    clear_payload();
    set_has_log_get();
    _impl_.payload_.log_get_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::LogGetResponse>(GetArena());
  }
  return _impl_.payload_.log_get_;
}
inline ::sunlight::api::LogGetResponse* Response::mutable_log_get() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::LogGetResponse* _msg = _internal_mutable_log_get();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.log_get)
  return _msg;
}

// .sunlight.api.ZoneOpenResponse zone_open = 107;
inline bool Response::has_zone_open() const {
  return payload_case() == kZoneOpen;
}
inline bool Response::_internal_has_zone_open() const {
  return payload_case() == kZoneOpen;
}
inline void Response::set_has_zone_open() {
  _impl_._oneof_case_[0] = kZoneOpen;
}
inline void Response::clear_zone_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kZoneOpen) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.zone_open_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.zone_open_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::ZoneOpenResponse* Response::release_zone_open() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.zone_open)
  if (payload_case() == kZoneOpen) {
    clear_has_payload();
    auto* temp = _impl_.payload_.zone_open_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.zone_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::ZoneOpenResponse& Response::_internal_zone_open() const {
  return payload_case() == kZoneOpen ? *_impl_.payload_.zone_open_ : reinterpret_cast<::sunlight::api::ZoneOpenResponse&>(::sunlight::api::_ZoneOpenResponse_default_instance_);
}
inline const ::sunlight::api::ZoneOpenResponse& Response::zone_open() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.zone_open)
  return _internal_zone_open();
}
inline ::sunlight::api::ZoneOpenResponse* Response::unsafe_arena_release_zone_open() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.zone_open)
  if (payload_case() == kZoneOpen) {
    clear_has_payload();
    auto* temp = _impl_.payload_.zone_open_;
    _impl_.payload_.zone_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_zone_open(::sunlight::api::ZoneOpenResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_zone_open();
    _impl_.payload_.zone_open_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.zone_open)
}
inline ::sunlight::api::ZoneOpenResponse* Response::_internal_mutable_zone_open() {
  if (payload_case() != kZoneOpen) {
    clear_payload();
    set_has_zone_open();
    _impl_.payload_.zone_open_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::ZoneOpenResponse>(GetArena());
  }
  return _impl_.payload_.zone_open_;
}
inline ::sunlight::api::ZoneOpenResponse* Response::mutable_zone_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::ZoneOpenResponse* _msg = _internal_mutable_zone_open();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.zone_open)
  return _msg;
}

// .sunlight.api.ZoneCloseResponse zone_close = 108;
inline bool Response::has_zone_close() const {
  return payload_case() == kZoneClose;
}
inline bool Response::_internal_has_zone_close() const {
  return payload_case() == kZoneClose;
}
inline void Response::set_has_zone_close() {
  _impl_._oneof_case_[0] = kZoneClose;
}
inline void Response::clear_zone_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kZoneClose) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.zone_close_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.zone_close_);
    }
    clear_has_payload();
  }
}
inline ::sunlight::api::ZoneCloseResponse* Response::release_zone_close() {
  // @@protoc_insertion_point(field_release:sunlight.api.Response.zone_close)
  if (payload_case() == kZoneClose) {
    clear_has_payload();
    auto* temp = _impl_.payload_.zone_close_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.zone_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sunlight::api::ZoneCloseResponse& Response::_internal_zone_close() const {
  return payload_case() == kZoneClose ? *_impl_.payload_.zone_close_ : reinterpret_cast<::sunlight::api::ZoneCloseResponse&>(::sunlight::api::_ZoneCloseResponse_default_instance_);
}
inline const ::sunlight::api::ZoneCloseResponse& Response::zone_close() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.Response.zone_close)
  return _internal_zone_close();
}
inline ::sunlight::api::ZoneCloseResponse* Response::unsafe_arena_release_zone_close() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sunlight.api.Response.zone_close)
  if (payload_case() == kZoneClose) {
    clear_has_payload();
    auto* temp = _impl_.payload_.zone_close_;
    _impl_.payload_.zone_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_zone_close(::sunlight::api::ZoneCloseResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_zone_close();
    _impl_.payload_.zone_close_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sunlight.api.Response.zone_close)
}
inline ::sunlight::api::ZoneCloseResponse* Response::_internal_mutable_zone_close() {
  if (payload_case() != kZoneClose) {
    clear_payload();
    set_has_zone_close();
    _impl_.payload_.zone_close_ =
        ::google::protobuf::Message::DefaultConstruct<::sunlight::api::ZoneCloseResponse>(GetArena());
  }
  return _impl_.payload_.zone_close_;
}
inline ::sunlight::api::ZoneCloseResponse* Response::mutable_zone_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::sunlight::api::ZoneCloseResponse* _msg = _internal_mutable_zone_close();
  // @@protoc_insertion_point(field_mutable:sunlight.api.Response.zone_close)
  return _msg;
}

inline bool Response::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Response::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Response::PayloadCase Response::payload_case() const {
  return Response::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace sunlight


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // response_2eproto_2epb_2eh
