// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: dto.proto
// Protobuf C++ Version: 5.29.0

#ifndef dto_2eproto_2epb_2eh
#define dto_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dto_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dto_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_dto_2eproto;
namespace sunlight {
namespace api {
class LogItem;
struct LogItemDefaultTypeInternal;
extern LogItemDefaultTypeInternal _LogItem_default_instance_;
class WorldInfo;
struct WorldInfoDefaultTypeInternal;
extern WorldInfoDefaultTypeInternal _WorldInfo_default_instance_;
class ZoneInfo;
struct ZoneInfoDefaultTypeInternal;
extern ZoneInfoDefaultTypeInternal _ZoneInfo_default_instance_;
}  // namespace api
}  // namespace sunlight
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace sunlight {
namespace api {

// ===================================================================


// -------------------------------------------------------------------

class ZoneInfo final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.ZoneInfo) */ {
 public:
  inline ZoneInfo() : ZoneInfo(nullptr) {}
  ~ZoneInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ZoneInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ZoneInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ZoneInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ZoneInfo(const ZoneInfo& from) : ZoneInfo(nullptr, from) {}
  inline ZoneInfo(ZoneInfo&& from) noexcept
      : ZoneInfo(nullptr, std::move(from)) {}
  inline ZoneInfo& operator=(const ZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneInfo& operator=(ZoneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneInfo* internal_default_instance() {
    return reinterpret_cast<const ZoneInfo*>(
        &_ZoneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ZoneInfo& a, ZoneInfo& b) { a.Swap(&b); }
  inline void Swap(ZoneInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ZoneInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ZoneInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ZoneInfo& from) { ZoneInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ZoneInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.ZoneInfo"; }

 protected:
  explicit ZoneInfo(::google::protobuf::Arena* arena);
  ZoneInfo(::google::protobuf::Arena* arena, const ZoneInfo& from);
  ZoneInfo(::google::protobuf::Arena* arena, ZoneInfo&& from) noexcept
      : ZoneInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // bytes name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.ZoneInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ZoneInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    ::int32_t port_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dto_2eproto;
};
// -------------------------------------------------------------------

class LogItem final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.LogItem) */ {
 public:
  inline LogItem() : LogItem(nullptr) {}
  ~LogItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogItem(const LogItem& from) : LogItem(nullptr, from) {}
  inline LogItem(LogItem&& from) noexcept
      : LogItem(nullptr, std::move(from)) {}
  inline LogItem& operator=(const LogItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogItem& operator=(LogItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogItem* internal_default_instance() {
    return reinterpret_cast<const LogItem*>(
        &_LogItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(LogItem& a, LogItem& b) { a.Swap(&b); }
  inline void Swap(LogItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogItem& from) { LogItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.LogItem"; }

 protected:
  explicit LogItem(::google::protobuf::Arena* arena);
  LogItem(::google::protobuf::Arena* arena, const LogItem& from);
  LogItem(::google::protobuf::Arena* arena, LogItem&& from) noexcept
      : LogItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 3,
    kDateTimeFieldNumber = 1,
    kLogLevelFieldNumber = 2,
  };
  // bytes message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // int64 date_time = 1;
  void clear_date_time() ;
  ::int64_t date_time() const;
  void set_date_time(::int64_t value);

  private:
  ::int64_t _internal_date_time() const;
  void _internal_set_date_time(::int64_t value);

  public:
  // int32 log_level = 2;
  void clear_log_level() ;
  ::int32_t log_level() const;
  void set_log_level(::int32_t value);

  private:
  ::int32_t _internal_log_level() const;
  void _internal_set_log_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.LogItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogItem& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::int64_t date_time_;
    ::int32_t log_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dto_2eproto;
};
// -------------------------------------------------------------------

class WorldInfo final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:sunlight.api.WorldInfo) */ {
 public:
  inline WorldInfo() : WorldInfo(nullptr) {}
  ~WorldInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WorldInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WorldInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorldInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline WorldInfo(const WorldInfo& from) : WorldInfo(nullptr, from) {}
  inline WorldInfo(WorldInfo&& from) noexcept
      : WorldInfo(nullptr, std::move(from)) {}
  inline WorldInfo& operator=(const WorldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldInfo& operator=(WorldInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldInfo* internal_default_instance() {
    return reinterpret_cast<const WorldInfo*>(
        &_WorldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(WorldInfo& a, WorldInfo& b) { a.Swap(&b); }
  inline void Swap(WorldInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WorldInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorldInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WorldInfo& from) { WorldInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WorldInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "sunlight.api.WorldInfo"; }

 protected:
  explicit WorldInfo(::google::protobuf::Arena* arena);
  WorldInfo(::google::protobuf::Arena* arena, const WorldInfo& from);
  WorldInfo(::google::protobuf::Arena* arena, WorldInfo&& from) noexcept
      : WorldInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOpenZoneListFieldNumber = 3,
    kIdFieldNumber = 1,
    kUserCountFieldNumber = 2,
  };
  // repeated .sunlight.api.ZoneInfo open_zone_list = 3;
  int open_zone_list_size() const;
  private:
  int _internal_open_zone_list_size() const;

  public:
  void clear_open_zone_list() ;
  ::sunlight::api::ZoneInfo* mutable_open_zone_list(int index);
  ::google::protobuf::RepeatedPtrField<::sunlight::api::ZoneInfo>* mutable_open_zone_list();

  private:
  const ::google::protobuf::RepeatedPtrField<::sunlight::api::ZoneInfo>& _internal_open_zone_list() const;
  ::google::protobuf::RepeatedPtrField<::sunlight::api::ZoneInfo>* _internal_mutable_open_zone_list();
  public:
  const ::sunlight::api::ZoneInfo& open_zone_list(int index) const;
  ::sunlight::api::ZoneInfo* add_open_zone_list();
  const ::google::protobuf::RepeatedPtrField<::sunlight::api::ZoneInfo>& open_zone_list() const;
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 user_count = 2;
  void clear_user_count() ;
  ::int32_t user_count() const;
  void set_user_count(::int32_t value);

  private:
  ::int32_t _internal_user_count() const;
  void _internal_set_user_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sunlight.api.WorldInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WorldInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::sunlight::api::ZoneInfo > open_zone_list_;
    ::int32_t id_;
    ::int32_t user_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dto_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ZoneInfo

// int32 id = 1;
inline void ZoneInfo::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t ZoneInfo::id() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneInfo.id)
  return _internal_id();
}
inline void ZoneInfo::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneInfo.id)
}
inline ::int32_t ZoneInfo::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void ZoneInfo::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// int32 port = 2;
inline void ZoneInfo::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0;
}
inline ::int32_t ZoneInfo::port() const {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneInfo.port)
  return _internal_port();
}
inline void ZoneInfo::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneInfo.port)
}
inline ::int32_t ZoneInfo::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void ZoneInfo::_internal_set_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// bytes name = 3;
inline void ZoneInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ZoneInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.ZoneInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ZoneInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.ZoneInfo.name)
}
inline std::string* ZoneInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sunlight.api.ZoneInfo.name)
  return _s;
}
inline const std::string& ZoneInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ZoneInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ZoneInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ZoneInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.ZoneInfo.name)
  return _impl_.name_.Release();
}
inline void ZoneInfo::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.ZoneInfo.name)
}

// -------------------------------------------------------------------

// WorldInfo

// int32 id = 1;
inline void WorldInfo::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t WorldInfo::id() const {
  // @@protoc_insertion_point(field_get:sunlight.api.WorldInfo.id)
  return _internal_id();
}
inline void WorldInfo::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sunlight.api.WorldInfo.id)
}
inline ::int32_t WorldInfo::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void WorldInfo::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// int32 user_count = 2;
inline void WorldInfo::clear_user_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_count_ = 0;
}
inline ::int32_t WorldInfo::user_count() const {
  // @@protoc_insertion_point(field_get:sunlight.api.WorldInfo.user_count)
  return _internal_user_count();
}
inline void WorldInfo::set_user_count(::int32_t value) {
  _internal_set_user_count(value);
  // @@protoc_insertion_point(field_set:sunlight.api.WorldInfo.user_count)
}
inline ::int32_t WorldInfo::_internal_user_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_count_;
}
inline void WorldInfo::_internal_set_user_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_count_ = value;
}

// repeated .sunlight.api.ZoneInfo open_zone_list = 3;
inline int WorldInfo::_internal_open_zone_list_size() const {
  return _internal_open_zone_list().size();
}
inline int WorldInfo::open_zone_list_size() const {
  return _internal_open_zone_list_size();
}
inline void WorldInfo::clear_open_zone_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_zone_list_.Clear();
}
inline ::sunlight::api::ZoneInfo* WorldInfo::mutable_open_zone_list(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:sunlight.api.WorldInfo.open_zone_list)
  return _internal_mutable_open_zone_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::sunlight::api::ZoneInfo>* WorldInfo::mutable_open_zone_list()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:sunlight.api.WorldInfo.open_zone_list)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_open_zone_list();
}
inline const ::sunlight::api::ZoneInfo& WorldInfo::open_zone_list(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.WorldInfo.open_zone_list)
  return _internal_open_zone_list().Get(index);
}
inline ::sunlight::api::ZoneInfo* WorldInfo::add_open_zone_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::sunlight::api::ZoneInfo* _add = _internal_mutable_open_zone_list()->Add();
  // @@protoc_insertion_point(field_add:sunlight.api.WorldInfo.open_zone_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::sunlight::api::ZoneInfo>& WorldInfo::open_zone_list() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:sunlight.api.WorldInfo.open_zone_list)
  return _internal_open_zone_list();
}
inline const ::google::protobuf::RepeatedPtrField<::sunlight::api::ZoneInfo>&
WorldInfo::_internal_open_zone_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.open_zone_list_;
}
inline ::google::protobuf::RepeatedPtrField<::sunlight::api::ZoneInfo>*
WorldInfo::_internal_mutable_open_zone_list() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.open_zone_list_;
}

// -------------------------------------------------------------------

// LogItem

// int64 date_time = 1;
inline void LogItem::clear_date_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_time_ = ::int64_t{0};
}
inline ::int64_t LogItem::date_time() const {
  // @@protoc_insertion_point(field_get:sunlight.api.LogItem.date_time)
  return _internal_date_time();
}
inline void LogItem::set_date_time(::int64_t value) {
  _internal_set_date_time(value);
  // @@protoc_insertion_point(field_set:sunlight.api.LogItem.date_time)
}
inline ::int64_t LogItem::_internal_date_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_time_;
}
inline void LogItem::_internal_set_date_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_time_ = value;
}

// int32 log_level = 2;
inline void LogItem::clear_log_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_level_ = 0;
}
inline ::int32_t LogItem::log_level() const {
  // @@protoc_insertion_point(field_get:sunlight.api.LogItem.log_level)
  return _internal_log_level();
}
inline void LogItem::set_log_level(::int32_t value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:sunlight.api.LogItem.log_level)
}
inline ::int32_t LogItem::_internal_log_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_level_;
}
inline void LogItem::_internal_set_log_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_level_ = value;
}

// bytes message = 3;
inline void LogItem::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogItem::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:sunlight.api.LogItem.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogItem::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:sunlight.api.LogItem.message)
}
inline std::string* LogItem::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sunlight.api.LogItem.message)
  return _s;
}
inline const std::string& LogItem::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void LogItem::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* LogItem::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* LogItem::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:sunlight.api.LogItem.message)
  return _impl_.message_.Release();
}
inline void LogItem::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:sunlight.api.LogItem.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace sunlight


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // dto_2eproto_2epb_2eh
