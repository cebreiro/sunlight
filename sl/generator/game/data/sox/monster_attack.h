#pragma once
/**********************************************************
*        AUTO GENERATED FILE BY sox_code_generator        *
*                  DO NOT EDIT THIS FILE                  *
**********************************************************/

#include "sl/data/sox/sox_table_interface.h"

namespace sunlight::sox
{
    struct MonsterAttack
    {
        explicit MonsterAttack(StreamReader<std::vector<char>::const_iterator>& reader);

        int32_t index = {};
        int32_t attackType = {};
        int32_t attackPercent = {};
        int32_t attackRange = {};
        float attackDamageFactor = {};
        int32_t attackDivDamage = {};
        int32_t attackDivDamageDelay = {};
        int32_t attackEffectRange = {};
        int32_t attackReserved1 = {};
        int32_t attackReserved2 = {};
        int32_t attackReserved3 = {};
        int32_t attackBulletID = {};
        int32_t attackConditionID = {};
        int32_t attackConditionKeepTime = {};
        int32_t attackConditionProbability = {};
        int32_t attackConditionReserved1 = {};
        int32_t attackConditionReserved2 = {};
        int32_t attackAniPartID = {};
        int32_t attackEndFrame = {};
        int32_t attackDelay = {};
        int32_t attackBeatFrame = {};
        int32_t attackFxGroupID = {};
        int32_t attackSoundFileID = {};
        int32_t skill1Type = {};
        int32_t skill1Percent = {};
        int32_t skill1Range = {};
        int32_t skill1CoolTime = {};
        int32_t skill1LV = {};
        int32_t skill1AniPartID = {};
        int32_t skill1EndFrame = {};
        int32_t skill1Delay = {};
        int32_t skill1BeatFrame = {};
        int32_t skill1AbilityID = {};
        int32_t skill2Type = {};
        int32_t skill2Percent = {};
        int32_t skill2Range = {};
        int32_t skill2CoolTime = {};
        int32_t skill2LV = {};
        int32_t skill2AniPartID = {};
        int32_t skill2EndFrame = {};
        int32_t skill2Delay = {};
        int32_t skill2BeatFrame = {};
        int32_t skill2AbilityID = {};
        int32_t skill3Type = {};
        int32_t skill3Percent = {};
        int32_t skill3Range = {};
        int32_t skill3CoolTime = {};
        int32_t skill3LV = {};
        int32_t skill3AniPartID = {};
        int32_t skill3EndFrame = {};
        int32_t skill3Delay = {};
        int32_t skill3BeatFrame = {};
        int32_t skill3AbilityID = {};
        int32_t passive1Percent = {};
        int32_t passive1LV = {};
        int32_t passive1AddExp = {};
        int32_t passive1ID = {};
        int32_t passive1ExtraMoney = {};
        int32_t passive2Percent = {};
        int32_t passive2LV = {};
        int32_t passive2AddExp = {};
        int32_t passive2ID = {};
        int32_t passive2ExtraMoney = {};
        int32_t passive3Percent = {};
        int32_t passive3LV = {};
        int32_t passive3AddExp = {};
        int32_t passive3ID = {};
        int32_t passive3ExtraMoney = {};
    };

    class MonsterAttackTable final : public ISoxTable, public std::enable_shared_from_this<MonsterAttackTable>
    {
    public:
        void LoadFromFile(const std::filesystem::path& path) override;

        auto Find(int32_t index) const -> const MonsterAttack*;
        auto Get() const -> const std::vector<MonsterAttack>&;

    private:
        std::unordered_map<int32_t, MonsterAttack*> _umap;
        std::vector<MonsterAttack> _vector;

    };
}
