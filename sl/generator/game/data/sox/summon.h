#pragma once
/**********************************************************
*        AUTO GENERATED FILE BY sox_code_generator        *
*                  DO NOT EDIT THIS FILE                  *
**********************************************************/

#include "sl/data/sox/sox_table_interface.h"

namespace sunlight::sox
{
    struct Summon
    {
        explicit Summon(StreamReader<std::vector<char>::const_iterator>& reader);

        int32_t index = {};
        std::string monstername = {};
        int32_t modelid = {};
        int32_t level = {};
        int32_t hp = {};
        int32_t patk = {};
        int32_t phrat = {};
        int32_t perat = {};
        int32_t pdef = {};
        int32_t resDamage = {};
        int32_t death1delay = {};
        int32_t lifeTime = {};
        int32_t aiType = {};
        int32_t basicspeed = {};
        int32_t sight = {};
        int32_t chase = {};
        int32_t size = {};
        int32_t characteristic = {};
        int32_t searchtime = {};
        int32_t moveType = {};
        int32_t moveRangeMin = {};
        int32_t moveRangeMax = {};
        int32_t moveDelayMin = {};
        int32_t moveDelayMax = {};
        float attack1dmgrfactor = {};
        int32_t attack1type = {};
        float attack1percent = {};
        int32_t attack1range = {};
        float attack1dmgfactor = {};
        int32_t attack1effectrange = {};
        int32_t attack1additional = {};
        int32_t attack1reserved1 = {};
        int32_t attack1reserved2 = {};
        int32_t attack1reserved3 = {};
        int32_t attack1fx = {};
        int32_t attack1atkanipartid = {};
        int32_t attack1atkprm = {};
        int32_t attack1delay = {};
        int32_t attack1beatkani = {};
        int32_t attack1FxType = {};
        int32_t attack1FxId = {};
        int32_t attack1Sound = {};
        int32_t attack2type = {};
        float attack2percent = {};
        int32_t attack2range = {};
        float attack2dmgfactor = {};
        int32_t attack2effectrange = {};
        int32_t attack2additional = {};
        int32_t attack2reserved1 = {};
        int32_t attack2reserved2 = {};
        int32_t attack2reserved3 = {};
        int32_t attack2fx = {};
        int32_t attack2atkanipartid = {};
        int32_t attack2atkprm = {};
        int32_t attack2delay = {};
        int32_t attack2beatkani = {};
        int32_t attack2FxType = {};
        int32_t attack2FxId = {};
        int32_t attack2Sound = {};
        int32_t attack3type = {};
        float attack3percent = {};
        int32_t attack3range = {};
        float attack3dmgfactor = {};
        int32_t attack3effectrange = {};
        int32_t attack3additional = {};
        int32_t attack3reserved1 = {};
        int32_t attack3reserved2 = {};
        int32_t attack3reserved3 = {};
        int32_t attack3fx = {};
        int32_t attack3atkanipartid = {};
        int32_t attack3atkprm = {};
        int32_t attack3delay = {};
        int32_t attack3beatkani = {};
        int32_t attack3FxType = {};
        int32_t attack3FxId = {};
        int32_t attack3Sound = {};
        int32_t attack4type = {};
        float attack4percent = {};
        int32_t attack4range = {};
        float attack4dmgfactor = {};
        int32_t attack4effectrange = {};
        int32_t attack4additional = {};
        int32_t attack4reserved1 = {};
        int32_t attack4reserved2 = {};
        int32_t attack4reserved3 = {};
        int32_t attack4fx = {};
        int32_t attack4atkanipartid = {};
        int32_t attack4atkprm = {};
        int32_t attack4delay = {};
        int32_t attack4beatkani = {};
        int32_t attack4FxType = {};
        int32_t attack4FxId = {};
        int32_t attack4Sound = {};
    };

    class SummonTable final : public ISoxTable, public std::enable_shared_from_this<SummonTable>
    {
    public:
        void LoadFromFile(const std::filesystem::path& path) override;

        auto Find(int32_t index) const -> const Summon*;
        auto Get() const -> const std::vector<Summon>&;

    private:
        std::unordered_map<int32_t, Summon*> _umap;
        std::vector<Summon> _vector;

    };
}
