#pragma once
/**********************************************************
*        AUTO GENERATED FILE BY sox_code_generator        *
*                  DO NOT EDIT THIS FILE                  *
**********************************************************/

#include "sl/data/sox/sox_table_interface.h"

namespace sunlight::sox
{
    struct Itemtable
    {
        explicit Itemtable(StreamReader<std::vector<char>::const_iterator>& reader);

        int32_t index = {};
        std::string name = {};
        int32_t generate = {};
        int32_t category = {};
        int32_t type = {};
        int32_t job = {};
        std::string explanation = {};
        int32_t detailCate1 = {};
        int32_t detailCate2 = {};
        int32_t modifiable = {};
        int32_t invenWidth = {};
        int32_t invenHeight = {};
        int32_t modelid = {};
        int32_t quickslot = {};
        int32_t materialAmbient = {};
        int32_t materialDiffuse = {};
        int32_t limitArticle1 = {};
        int32_t limitArticle2 = {};
        int32_t limitArticle3 = {};
        int32_t limitArticle4 = {};
        int32_t limitValue1 = {};
        int32_t limitValue2 = {};
        int32_t limitValue3 = {};
        int32_t limitValue4 = {};
        int32_t distanceDefense = {};
        int32_t accuracyEvasion = {};
        int32_t durabilityMaxcount = {};
        int32_t maxInvenCount = {};
        int32_t minimumdamage = {};
        int32_t maximumdamage = {};
        int32_t twohand = {};
        int32_t limitTime = {};
        int32_t effect1 = {};
        int32_t effect2 = {};
        int32_t effect3 = {};
        int32_t effect4 = {};
        float effectvalue1 = {};
        float effectvalue2 = {};
        float effectvalue3 = {};
        float effectvalue4 = {};
        int32_t weaponSound = {};
        int32_t weaponFXH = {};
        int32_t weaponFXM = {};
        int32_t weaponFXL = {};
        int32_t effectID1 = {};
        int32_t effectID2 = {};
        int32_t effectID3 = {};
        int32_t effectID4 = {};
        int32_t rarity = {};
        int32_t sound1 = {};
        int32_t petEP = {};
        int32_t petNP = {};
        int32_t petEXP = {};
    };

    class ItemtableTable final : public ISoxTable, public std::enable_shared_from_this<ItemtableTable>
    {
    public:
        void LoadFromFile(const std::filesystem::path& path) override;

        auto Find(int32_t index) const -> const Itemtable*;
        auto Get() const -> const std::vector<Itemtable>&;

    private:
        std::unordered_map<int32_t, Itemtable*> _umap;
        std::vector<Itemtable> _vector;

    };
}
